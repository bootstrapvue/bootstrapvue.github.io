(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{411:function(n,t){n.exports='<h1 id=form-checkbox-inputs class=bv-no-focus-ring><span class=bd-content-title>Form Checkbox Inputs</span></h1> <p class=bd-lead>For cross browser consistency, <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code> and <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> use Bootstrap&#39;s custom checkbox input to replace the browser default checkbox input. It is built on top of semantic and accessible markup, so it is a solid replacement for the default checkbox input.</p> <p><strong>Example 1:</strong> Single checkbox</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span>\n      <span class=hljs-attr>id</span>=<span class=hljs-string>"checkbox-1"</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"status"</span>\n      <span class=hljs-attr>name</span>=<span class=hljs-string>"checkbox-1"</span>\n      <span class=hljs-attr>value</span>=<span class=hljs-string>"accepted"</span>\n      <span class=hljs-attr>unchecked-value</span>=<span class=hljs-string>"not_accepted"</span>\n    &gt;</span>\n      I accept the terms and use\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>State: <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ status }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>status</span>: <span class=hljs-string>\'not_accepted\'</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox.vue --&gt;</span></pre></div><p><strong>Example 2:</strong> Multiple choice checkboxes</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Using options array:"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>id</span>=<span class=hljs-string>"checkbox-group-1"</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>name</span>=<span class=hljs-string>"flavour-1"</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Using sub-components:"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"checkbox-group-2"</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span> <span class=hljs-attr>name</span>=<span class=hljs-string>"flavour-2"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>value</span>=<span class=hljs-string>"orange"</span>&gt;</span>Orange<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>value</span>=<span class=hljs-string>"apple"</span>&gt;</span>Apple<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>value</span>=<span class=hljs-string>"pineapple"</span>&gt;</span>Pineapple<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>value</span>=<span class=hljs-string>"grape"</span>&gt;</span>Grape<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>Selected: <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ selected }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>selected</span>: [], <span class=hljs-comment>// Must be an array reference!</span>\n        <span class=hljs-attr>options</span>: [\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Orange\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'orange\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Apple\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'apple\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Pineapple\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'pineapple\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Grape\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'grape\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-multiple.vue --&gt;</span></pre></div><p>Feel free to mix and match <code class=text-nowrap translate=no>options</code> prop and <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> in <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>. Manually placed <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> inputs will appear <em>below</em> any checkbox inputs generated by the <code class=text-nowrap translate=no>options</code> prop. To have them appear <em>above</em> the inputs generated by <code class=text-nowrap translate=no>options</code>, place them in the named slot <code class=text-nowrap translate=no>first</code>.</p> <h2 id=checkbox-group-options-array class=bv-no-focus-ring><span class=bd-content-title>Checkbox group options array<a class=anchorjs-link href=#checkbox-group-options-array aria-labelledby=checkbox-group-options-array></a></span></h2> <p><code class=text-nowrap translate=no>options</code> can be an array of strings or objects. Available fields:</p> <ul> <li><strong><code class=text-nowrap translate=no>value</code></strong> The selected value which will be set on <code class=text-nowrap translate=no>v-model</code></li> <li><strong><code class=text-nowrap translate=no>disabled</code></strong> Disables item for selection</li> <li><strong><code class=text-nowrap translate=no>text</code></strong> Display text, or <strong><code class=text-nowrap translate=no>html</code></strong> Display basic inline html</li> </ul> <p><code class=text-nowrap translate=no>value</code> can be a string, number, or simple object. Avoid using complex types in values.</p> <p>If both <code class=text-nowrap translate=no>html</code> and <code class=text-nowrap translate=no>text</code> are provided, <code class=text-nowrap translate=no>html</code> will take precedence. Only basic/native HTML is supported in the <code class=text-nowrap translate=no>html</code> field (components will not work). Note that not all browsers will render inline html (i.e. <code class=text-nowrap translate=no>&lt;i&gt;</code>, <code class=text-nowrap translate=no>&lt;strong&gt;</code>, etc) inside <code class=text-nowrap translate=no>&lt;option&gt;</code> elements of a <code class=text-nowrap translate=no>&lt;select&gt;</code>.</p> <p class="alert alert-danger"> <strong>Be cautious</strong> of placing user supplied content in the <code class=notranslate translate=no>html</code> field, as it may make you vulnerable to <a class=alert-link href=https://en.wikipedia.org/wiki/Cross-site_scripting> <abbr title="Cross Site Scripting Attacks">XSS attacks</abbr></a>, if you do not first <a class=alert-link href=https://en.wikipedia.org/wiki/HTML_sanitization>sanitize</a> the user supplied string. </p> <div class=bd-code><pre class="hljs js p-2" translate=no><span class=hljs-keyword>const</span> options = [<span class=hljs-string>\'A\'</span>, <span class=hljs-string>\'B\'</span>, <span class=hljs-string>\'C\'</span>, { <span class=hljs-attr>text</span>: <span class=hljs-string>\'D\'</span>, <span class=hljs-attr>value</span>: { <span class=hljs-attr>d</span>: <span class=hljs-number>1</span> }, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>true</span> }, <span class=hljs-string>\'E\'</span>, <span class=hljs-string>\'F\'</span>]</pre></div><p>If an array entry is a string, it will be used for both the generated <code class=text-nowrap translate=no>value</code> and <code class=text-nowrap translate=no>text</code> fields.</p> <p>You can mix using strings and <a href=#options-as-an-array-of-objects class=font-weight-bold>objects</a> in the array.</p> <p>Internally, BootstrapVue will convert the above array to the following array (the <a href=#options-as-an-array-of-objects class=font-weight-bold>array of objects</a>) format:</p> <div class=bd-code><pre class="hljs js p-2" translate=no><span class=hljs-keyword>const</span> options = [\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'A\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'A\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'B\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'B\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'C\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'C\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'D\'</span>, <span class=hljs-attr>value</span>: { <span class=hljs-attr>d</span>: <span class=hljs-number>1</span> }, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>true</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'E\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'E\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'F\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'F\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> }\n]</pre></div><h3 id=options-as-an-array-of-objects class=bv-no-focus-ring><span class=bd-content-title>Options as an array of objects<a class=anchorjs-link href=#options-as-an-array-of-objects aria-labelledby=options-as-an-array-of-objects></a></span></h3> <div class=bd-code><pre class="hljs js p-2" translate=no><span class=hljs-keyword>const</span> options = [\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Item 1\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'first\'</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Item 2\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'second\'</span> },\n  { <span class=hljs-attr>html</span>: <span class=hljs-string>\'&lt;b&gt;Item&lt;/b&gt; 3\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'third\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>true</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Item 4\'</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Item 5\'</span>, <span class=hljs-attr>value</span>: { <span class=hljs-attr>foo</span>: <span class=hljs-string>\'bar\'</span>, <span class=hljs-attr>baz</span>: <span class=hljs-literal>true</span> } }\n]</pre></div><p>If <code class=text-nowrap translate=no>value</code> is missing, then <code class=text-nowrap translate=no>text</code> will be used as both the <code class=text-nowrap translate=no>value</code> and <code class=text-nowrap translate=no>text</code> fields. If you use the <code class=text-nowrap translate=no>html</code> property, you <strong>must</strong> supply a <code class=text-nowrap translate=no>value</code> property.</p> <p>Internally, BootstrapVue will convert the above array to the following array (the <a href=#options-as-an-array-of-objects class=font-weight-bold>array of objects</a>) format:</p> <div class=bd-code><pre class="hljs js p-2" translate=no><span class=hljs-keyword>const</span> options = [\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Item 1\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'first\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Item 2\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'second\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> },\n  { <span class=hljs-attr>html</span>: <span class=hljs-string>\'&lt;b&gt;Item&lt;/b&gt; 3\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'third\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>true</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Item 4\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'Item 4\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> },\n  { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Item 5\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'E\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span> }\n]</pre></div><h3 id=changing-the-option-field-names class=bv-no-focus-ring><span class=bd-content-title>Changing the option field names<a class=anchorjs-link href=#changing-the-option-field-names aria-labelledby=changing-the-option-field-names></a></span></h3> <p>If you want to customize the field property names (for example using <code class=text-nowrap translate=no>name</code> field for display <code class=text-nowrap translate=no>text</code>) you can easily change them by setting the <code class=text-nowrap translate=no>text-field</code>, <code class=text-nowrap translate=no>html-field</code>, <code class=text-nowrap translate=no>value-field</code>, and <code class=text-nowrap translate=no>disabled-field</code> props to a string that contains the property name you would like to use:</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n      <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n      <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-3"</span>\n      <span class=hljs-attr>value-field</span>=<span class=hljs-string>"item"</span>\n      <span class=hljs-attr>text-field</span>=<span class=hljs-string>"name"</span>\n      <span class=hljs-attr>disabled-field</span>=<span class=hljs-string>"notEnabled"</span>\n    &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-3"</span>&gt;</span>Selected: <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ selected }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>selected</span>: [],\n        <span class=hljs-attr>options</span>: [\n          { <span class=hljs-attr>item</span>: <span class=hljs-string>\'A\'</span>, <span class=hljs-attr>name</span>: <span class=hljs-string>\'Option A\'</span> },\n          { <span class=hljs-attr>item</span>: <span class=hljs-string>\'B\'</span>, <span class=hljs-attr>name</span>: <span class=hljs-string>\'Option B\'</span> },\n          { <span class=hljs-attr>item</span>: <span class=hljs-string>\'D\'</span>, <span class=hljs-attr>name</span>: <span class=hljs-string>\'Option C\'</span>, <span class=hljs-attr>notEnabled</span>: <span class=hljs-literal>true</span> },\n          { <span class=hljs-attr>item</span>: { <span class=hljs-attr>d</span>: <span class=hljs-number>1</span> }, <span class=hljs-attr>name</span>: <span class=hljs-string>\'Option D\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-group-options-fields.vue --&gt;</span></pre></div><h2 id=inline-and-stacked-checkboxes class=bv-no-focus-ring><span class=bd-content-title>Inline and stacked checkboxes<a class=anchorjs-link href=#inline-and-stacked-checkboxes aria-labelledby=inline-and-stacked-checkboxes></a></span></h2> <p><code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code> components render inline checkboxes by default, while <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> renders block-level (stacked) checkboxes.</p> <p>Set the prop <code class=text-nowrap translate=no>stacked</code> on <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code> to place each form control one over the other, or if using individual checkboxes not inside a <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>, set the <code class=text-nowrap translate=no>inline</code> prop on <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Form-checkbox-group inline checkboxes (default)"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>name</span>=<span class=hljs-string>"flavour-1a"</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Form-checkbox-group stacked checkboxes"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>name</span>=<span class=hljs-string>"flavour-2a"</span>\n        <span class=hljs-attr>stacked</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Individual stacked checkboxes (default)"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span>\n        <span class=hljs-attr>v-for</span>=<span class=hljs-string>"option in options"</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:key</span>=<span class=hljs-string>"option.value"</span>\n        <span class=hljs-attr>:value</span>=<span class=hljs-string>"option.value"</span>\n        <span class=hljs-attr>name</span>=<span class=hljs-string>"flavour-3a"</span>\n      &gt;</span>\n        {{ option.text }}\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Individual inline checkboxes"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span>\n        <span class=hljs-attr>v-for</span>=<span class=hljs-string>"option in options"</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:key</span>=<span class=hljs-string>"option.value"</span>\n        <span class=hljs-attr>:value</span>=<span class=hljs-string>"option.value"</span>\n        <span class=hljs-attr>name</span>=<span class=hljs-string>"flavour-4a"</span>\n        <span class=hljs-attr>inline</span>\n      &gt;</span>\n        {{ option.text }}\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>selected</span>: [], <span class=hljs-comment>// Must be an array reference!</span>\n        <span class=hljs-attr>options</span>: [\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Orange\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'orange\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Apple\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'apple\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Pineapple\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'pineapple\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Grape\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'grape\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-stacked.vue --&gt;</span></pre></div><h2 id=control-sizing class=bv-no-focus-ring><span class=bd-content-title>Control sizing<a class=anchorjs-link href=#control-sizing aria-labelledby=control-sizing></a></span></h2> <p>Use the <code class=text-nowrap translate=no>size</code> prop to control the size of the checkbox. The default size is medium. Supported size values are <code class=text-nowrap translate=no>sm</code> (small) and <code class=text-nowrap translate=no>lg</code> (large).</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span>&gt;</span>Small<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span>&gt;</span>Default<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"lg"</span>&gt;</span>Large<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-checkbox-sizes.vue --&gt;</span></pre></div><p>Sizes can be set on individual <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> components, or inherited from the size setting of <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>.</p> <p><strong>Note:</strong> Bootstrap v4.x does not natively support sizes for the custom checkbox control. However, BootstrapVue includes custom SCSS/CSS that adds support for sizing the custom checkboxes.</p> <h2 id=checkbox-values-and-v-model class=bv-no-focus-ring><span class=bd-content-title>Checkbox values and <code class=text-nowrap translate=no>v-model</code><a class=anchorjs-link href=#checkbox-values-and-v-model aria-labelledby=checkbox-values-and-v-model></a></span></h2> <p>By default, <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> value will be <code class=text-nowrap translate=no>true</code> when checked and <code class=text-nowrap translate=no>false</code> when unchecked. You can customize the checked and unchecked values by specifying the <code class=text-nowrap translate=no>value</code> and <code class=text-nowrap translate=no>unchecked-value</code> properties, respectively.</p> <p>The <code class=text-nowrap translate=no>v-model</code> binds to the <code class=text-nowrap translate=no>checked</code> prop. When you have multiple checkboxes that bind to a single data state variable, you <strong>must</strong> provide an array reference (<code class=text-nowrap translate=no>[]</code>) to your <code class=text-nowrap translate=no>v-model</code>. Do not use the <code class=text-nowrap translate=no>checked</code> prop directly.</p> <p>Note that when <code class=text-nowrap translate=no>v-model</code> is bound to multiple checkboxes (i.e an array ref), the <code class=text-nowrap translate=no>unchecked-value</code> is <strong>not used</strong>. Only the value(s) of the checked checkboxes will be returned in the <code class=text-nowrap translate=no>v-model</code> bound array. You should provide a unique value for each checkbox&#39;s <code class=text-nowrap translate=no>value</code> prop (the default of <code class=text-nowrap translate=no>true</code> will not work when bound to an array)</p> <p>To pre-check any radios, set the <code class=text-nowrap translate=no>v-model</code> to the value(s) of the checks that you would like pre-selected.</p> <p>When placing individual <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> components within a <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>, most props and the <code class=text-nowrap translate=no>v-model</code> are inherited from the <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>.</p> <p><strong>Note:</strong> the <code class=text-nowrap translate=no>unchecked-value</code> prop <em>does not</em> affect the native <code class=text-nowrap translate=no>&lt;input&gt;</code>&#39;s <code class=text-nowrap translate=no>value</code> attribute, because browsers don&#39;t include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a native <code class=text-nowrap translate=no>&lt;form&gt;</code> submit (e.g. <code class=text-nowrap translate=no>&#39;yes&#39;</code> or <code class=text-nowrap translate=no>&#39;no&#39;</code>), use radio inputs instead. This is the same limitation that <a href=https://vuejs.org/v2/guide/forms.html#Checkbox-1 target=_blank rel=noopener>Vue has with native checkbox inputs</a>.</p> <h3 id=multiple-checkboxes-and-accessibility class=bv-no-focus-ring><span class=bd-content-title>Multiple checkboxes and accessibility<a class=anchorjs-link href=#multiple-checkboxes-and-accessibility aria-labelledby=multiple-checkboxes-and-accessibility></a></span></h3> <p>When binding multiple checkboxes together, you must set the <code class=text-nowrap translate=no>name</code> prop to the same value for all <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code>s in the group individually or via the <code class=text-nowrap translate=no>name</code> prop of <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>. This will inform users of assistive technologies that the checkboxes are related and enables native browser keyboard navigation.</p> <p>Whenever using multiple checkboxes, it is recommended that the checkboxes be placed in a <a href=/docs/components/form-group class=font-weight-bold><code class=text-nowrap translate=no>&lt;b-form-group&gt;</code></a> component to associate a label with the entire group of checkboxes. See examples above.</p> <h2 id=button-style-checkboxes class=bv-no-focus-ring><span class=bd-content-title>Button style checkboxes<a class=anchorjs-link href=#button-style-checkboxes aria-labelledby=button-style-checkboxes></a></span></h2> <p>You can optionally render checkboxes to appear as buttons, either individually, or in a group.</p> <p>Button style checkboxes will have the class <code class=text-nowrap translate=no>.active</code> automatically applied to the label when they are in the <em>checked</em> state.</p> <h3 id=individual-checkbox-button-style class=bv-no-focus-ring><span class=bd-content-title>Individual checkbox button style<a class=anchorjs-link href=#individual-checkbox-button-style aria-labelledby=individual-checkbox-button-style></a></span></h3> <p>A single checkbox can be rendered with a button appearance by setting the prop <code class=text-nowrap translate=no>button</code> to <code class=text-nowrap translate=no>true</code></p> <p>Change the button variant by setting the <code class=text-nowrap translate=no>button-variant</code> prop to one of the standard Bootstrap button variants (see <a href=/docs/components/button class=font-weight-bold><code class=text-nowrap translate=no>&lt;b-button&gt;</code></a> for supported variants). The default variant is <code class=text-nowrap translate=no>secondary</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"checked1"</span> <span class=hljs-attr>name</span>=<span class=hljs-string>"check-button"</span> <span class=hljs-attr>button</span>&gt;</span>\n      Button Checkbox <span class=hljs-tag>&lt;<span class=hljs-name>b</span>&gt;</span>(Checked: {{ checked1 }})<span class=hljs-tag>&lt;/<span class=hljs-name>b</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"checked2"</span> <span class=hljs-attr>name</span>=<span class=hljs-string>"check-button"</span> <span class=hljs-attr>button</span> <span class=hljs-attr>button-variant</span>=<span class=hljs-string>"info"</span>&gt;</span>\n      Button Checkbox <span class=hljs-tag>&lt;<span class=hljs-name>b</span>&gt;</span>(Checked: {{ checked2 }})<span class=hljs-tag>&lt;/<span class=hljs-name>b</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>checked1</span>: <span class=hljs-literal>false</span>,\n        <span class=hljs-attr>checked2</span>: <span class=hljs-literal>false</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-button.vue --&gt;</span></pre></div><p>The <code class=text-nowrap translate=no>inline</code> prop has no effect on individual button-style checkboxes.</p> <h3 id=grouped-button-style-checkboxes class=bv-no-focus-ring><span class=bd-content-title>Grouped button style checkboxes<a class=anchorjs-link href=#grouped-button-style-checkboxes aria-labelledby=grouped-button-style-checkboxes></a></span></h3> <p>Render groups of checkboxes with the look of a button-group by setting the prop <code class=text-nowrap translate=no>buttons</code> on <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>. Change the button variant by setting the <code class=text-nowrap translate=no>button-variant</code> prop to one of the standard Bootstrap button variants (see <a href=/docs/components/button class=font-weight-bold><code class=text-nowrap translate=no>&lt;b-button&gt;</code></a> for supported variants). The default <code class=text-nowrap translate=no>button-variant</code> is <code class=text-nowrap translate=no>secondary</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Button-group style checkboxes"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>name</span>=<span class=hljs-string>"buttons-1"</span>\n        <span class=hljs-attr>buttons</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Button-group style checkboxes with variant primary and large buttons"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>buttons</span>\n        <span class=hljs-attr>button-variant</span>=<span class=hljs-string>"primary"</span>\n        <span class=hljs-attr>size</span>=<span class=hljs-string>"lg"</span>\n        <span class=hljs-attr>name</span>=<span class=hljs-string>"buttons-2"</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Stacked (vertical) button-group style checkboxes"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>stacked</span>\n        <span class=hljs-attr>buttons</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>selected</span>: [], <span class=hljs-comment>// Must be an array reference!</span>\n        <span class=hljs-attr>options</span>: [\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Orange\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'orange\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Apple\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'apple\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Pineapple\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'pineapple\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Grape\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'grape\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-button-group.vue --&gt;</span></pre></div><h2 id=switch-style-checkboxes class=bv-no-focus-ring><span class=bd-content-title>Switch style checkboxes<a class=anchorjs-link href=#switch-style-checkboxes aria-labelledby=switch-style-checkboxes></a></span></h2> <p>Switch styling is supported on <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> and <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code> components.</p> <p><strong>Note:</strong> If the checkbox is in <a href=#button-style-checkboxes class=font-weight-bold>button mode</a>, switch mode will have no effect.</p> <h3 id=individual-checkbox-switch-style class=bv-no-focus-ring><span class=bd-content-title>Individual checkbox switch style<a class=anchorjs-link href=#individual-checkbox-switch-style aria-labelledby=individual-checkbox-switch-style></a></span></h3> <p>A single checkbox can be rendered with a switch appearance by setting the prop <code class=text-nowrap translate=no>switch</code> to <code class=text-nowrap translate=no>true</code></p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"checked"</span> <span class=hljs-attr>name</span>=<span class=hljs-string>"check-button"</span> <span class=hljs-attr>switch</span>&gt;</span>\n      Switch Checkbox <span class=hljs-tag>&lt;<span class=hljs-name>b</span>&gt;</span>(Checked: {{ checked }})<span class=hljs-tag>&lt;/<span class=hljs-name>b</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>checked</span>: <span class=hljs-literal>false</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-switch.vue --&gt;</span></pre></div><h3 id=grouped-switch-style-checkboxes class=bv-no-focus-ring><span class=bd-content-title>Grouped switch style checkboxes<a class=anchorjs-link href=#grouped-switch-style-checkboxes aria-labelledby=grouped-switch-style-checkboxes></a></span></h3> <p>Render groups of checkboxes with the look of a switches by setting the prop <code class=text-nowrap translate=no>switches</code> on <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Inline switch style checkboxes"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>switches</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Stacked (vertical) switch style checkboxes"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>switches</span>\n        <span class=hljs-attr>stacked</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>selected</span>: [], <span class=hljs-comment>// Must be an array reference!</span>\n        <span class=hljs-attr>options</span>: [\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Red\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'red\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Green\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'green\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Yellow (disabled)\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'yellow\'</span>, <span class=hljs-attr>disabled</span>: <span class=hljs-literal>true</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Blue\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'blue\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkboxes-switch-group.vue --&gt;</span></pre></div><h3 id=switch-sizing class=bv-no-focus-ring><span class=bd-content-title>Switch sizing<a class=anchorjs-link href=#switch-sizing aria-labelledby=switch-sizing></a></span></h3> <p>Use the <code class=text-nowrap translate=no>size</code> prop to control the size of the switch. The default size is medium. Supported size values are <code class=text-nowrap translate=no>sm</code> (small) and <code class=text-nowrap translate=no>lg</code> (large).</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>switch</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span>&gt;</span>Small<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>switch</span>&gt;</span>Default<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>switch</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"lg"</span>&gt;</span>Large<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-checkbox-switch-sizes.vue --&gt;</span></pre></div><p>Sizes can be set on individual <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> components, or inherited from the size setting of <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>.</p> <p><strong>Note:</strong> Bootstrap v4.x does not natively support sizes for the custom switch control. However, BootstrapVue includes custom SCSS/CSS that adds support for sizing the custom switches.</p> <h2 id=non-custom-check-inputs-plain class=bv-no-focus-ring><span class=bd-content-title>Non custom check inputs (plain)<a class=anchorjs-link href=#non-custom-check-inputs-plain aria-labelledby=non-custom-check-inputs-plain></a></span></h2> <p>You can have <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code> or <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> render a browser native checkbox input by setting the <code class=text-nowrap translate=no>plain</code> prop.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Plain inline checkboxes"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>plain</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Plain stacked checkboxes"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n        <span class=hljs-attr>plain</span>\n        <span class=hljs-attr>stacked</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>selected</span>: [], <span class=hljs-comment>// Must be an array reference!</span>\n        <span class=hljs-attr>options</span>: [\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Orange\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'orange\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Apple\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'apple\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Pineapple\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'pineapple\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Grape\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'grape\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-plain.vue --&gt;</span></pre></div><p><strong>Note:</strong> The <code class=text-nowrap translate=no>plain</code> prop has no effect when <code class=text-nowrap translate=no>button</code> or <code class=text-nowrap translate=no>buttons</code> is set.</p> <h2 id=contextual-states class=bv-no-focus-ring><span class=bd-content-title>Contextual states<a class=anchorjs-link href=#contextual-states aria-labelledby=contextual-states></a></span></h2> <p>Bootstrap includes validation styles for <code class=text-nowrap translate=no>valid</code> and <code class=text-nowrap translate=no>invalid</code> states on most form controls.</p> <p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p> <ul> <li><code class=text-nowrap translate=no>false</code> (denotes invalid state) is great for when there&#39;s a blocking or required field. A user must fill in this field properly to submit the form.</li> <li><code class=text-nowrap translate=no>true</code> (denotes valid state) is ideal for situations when you have per-field validation throughout a form and want to encourage a user through the rest of the fields.</li> <li><code class=text-nowrap translate=no>null</code> Displays no validation state (neither valid nor invalid)</li> </ul> <p>To apply one of the contextual state icons on <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code>, set the <code class=text-nowrap translate=no>state</code> prop to <code class=text-nowrap translate=no>false</code> (for invalid), <code class=text-nowrap translate=no>true</code> (for valid), or <code class=text-nowrap translate=no>null</code> (no validation state).</p> <p><strong>Note:</strong> Contextual states are <strong>not</strong> supported when in button mode.</p> <h3 id=contextual-state-and-validation-example class=bv-no-focus-ring><span class=bd-content-title>Contextual state and validation example<a class=anchorjs-link href=#contextual-state-and-validation-example aria-labelledby=contextual-state-and-validation-example></a></span></h3> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span>\n      <span class=hljs-attr>:options</span>=<span class=hljs-string>"options"</span>\n      <span class=hljs-attr>:state</span>=<span class=hljs-string>"state"</span>\n      <span class=hljs-attr>name</span>=<span class=hljs-string>"checkbox-validation"</span>\n    &gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-invalid-feedback</span> <span class=hljs-attr>:state</span>=<span class=hljs-string>"state"</span>&gt;</span>Please select two<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-invalid-feedback</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-valid-feedback</span> <span class=hljs-attr>:state</span>=<span class=hljs-string>"state"</span>&gt;</span>Thank you<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-valid-feedback</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>value</span>: [],\n        <span class=hljs-attr>options</span>: [\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'First Check\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'first\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Second Check\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'second\'</span> },\n          { <span class=hljs-attr>text</span>: <span class=hljs-string>\'Third Check\'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>\'third\'</span> }\n        ]\n      }\n    },\n    <span class=hljs-attr>computed</span>: {\n      state() {\n        <span class=hljs-keyword>return</span> <span class=hljs-keyword>this</span>.value.length === <span class=hljs-number>2</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-checkbox-validation.vue --&gt;</span></pre></div><h3 id=required-constraint class=bv-no-focus-ring><span class=bd-content-title>Required constraint<a class=anchorjs-link href=#required-constraint aria-labelledby=required-constraint></a></span></h3> <p>When using individual <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> components (not in a <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code>), and you want the checkbox(es) to be <code class=text-nowrap translate=no>required</code> in your form, you <strong>must</strong> provide a <code class=text-nowrap translate=no>name</code> on each <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> in order for the required constraint to work. All <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> components tied to the same <code class=text-nowrap translate=no>v-model</code> <strong>must</strong> have the same <code class=text-nowrap translate=no>name</code>.</p> <p>The <code class=text-nowrap translate=no>name</code> is required in order for Assistive Technologies (such as screen readers, and keyboard only users) to know which checkboxes belong to the same form variable (the name also automatically enables native browser keyboard navigation), hence <code class=text-nowrap translate=no>required</code> will only work if <code class=text-nowrap translate=no>name</code> is set. <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code> will automatically generate a unique input name if one is not provided on the group.</p> <h2 id=autofocus class=bv-no-focus-ring><span class=bd-content-title>Autofocus<a class=anchorjs-link href=#autofocus aria-labelledby=autofocus></a></span></h2> <p>When the <code class=text-nowrap translate=no>autofocus</code> prop is set on <code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code>, the input will be auto-focused when it is inserted (i.e. <strong>mounted</strong>) into the document, or re-activated when inside a Vue <code class=text-nowrap translate=no>&lt;keep-alive&gt;</code> component. Note that this prop <strong>does not</strong> set the <code class=text-nowrap translate=no>autofocus</code> attribute on the input, nor can it tell when the input becomes visible.</p> <h2 id=indeterminate-tri-state-support class=bv-no-focus-ring><span class=bd-content-title>Indeterminate (tri-state) support<a class=anchorjs-link href=#indeterminate-tri-state-support aria-labelledby=indeterminate-tri-state-support></a></span></h2> <p>Normally a checkbox input can only have two states: <em>checked</em> or <em>unchecked</em>. They can have any value, but they either submit that value (<em>checked</em>) or don&#39;t (<em>unchecked</em>) with a form submission (although BootstrapVue allows a value for the <em>unchecked</em> state on a single checkbox)</p> <p><em>Visually</em>, there are actually three states a checkbox can be in: <em>checked</em>, <em>unchecked</em>, or <strong><em>indeterminate</em></strong>.</p> <p>The <em>indeterminate</em> state is <strong>visual only</strong>. The checkbox is still either checked or unchecked as a value. That means the visual indeterminate state masks the real value of the checkbox, so that better make sense in your UI!</p> <p><code class=text-nowrap translate=no>&lt;b-form-checkbox&gt;</code> supports setting this visual indeterminate state via the <code class=text-nowrap translate=no>indeterminate</code> prop (defaults to <code class=text-nowrap translate=no>false</code>). Clicking the checkbox will clear its indeterminate state. The <code class=text-nowrap translate=no>indeterminate</code> prop can be synced to the checkbox&#39;s state by v-binding the <code class=text-nowrap translate=no>indeterminate</code> prop with the <code class=text-nowrap translate=no>.sync</code> modifier.</p> <p><strong>Note:</strong> indeterminate styling is not supported in button or switch mode, nor is it supported in <code class=text-nowrap translate=no>&lt;b-form-checkbox-group&gt;</code> (multiple checkboxes).</p> <p><strong>Single Indeterminate checkbox:</strong></p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"checked"</span> <span class=hljs-attr>:indeterminate.sync</span>=<span class=hljs-string>"indeterminate"</span>&gt;</span>\n      Click me to see what happens\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-3"</span>&gt;</span>\n      Checked: <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ checked }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>br</span>&gt;</span>\n      Indeterminate: <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ indeterminate }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"toggleIndeterminate"</span>&gt;</span>Toggle Indeterminate State<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>checked</span>: <span class=hljs-literal>true</span>,\n        <span class=hljs-attr>indeterminate</span>: <span class=hljs-literal>true</span>\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      toggleIndeterminate() {\n        <span class=hljs-keyword>this</span>.indeterminate = !<span class=hljs-keyword>this</span>.indeterminate\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-indeterminate.vue --&gt;</span></pre></div><p><strong>Indeterminate checkbox use-case example:</strong></p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:label</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b</span>&gt;</span>Choose your flavours:<span class=hljs-tag>&lt;/<span class=hljs-name>b</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>br</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span>\n          <span class=hljs-attr>v-model</span>=<span class=hljs-string>"allSelected"</span>\n          <span class=hljs-attr>:indeterminate</span>=<span class=hljs-string>"indeterminate"</span>\n          <span class=hljs-attr>aria-describedby</span>=<span class=hljs-string>"flavours"</span>\n          <span class=hljs-attr>aria-controls</span>=<span class=hljs-string>"flavours"</span>\n          @<span class=hljs-attr>change</span>=<span class=hljs-string>"toggleAll"</span>\n        &gt;</span>\n          {{ allSelected ? \'Un-select All\' : \'Select All\' }}\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox-group</span>\n        <span class=hljs-attr>id</span>=<span class=hljs-string>"flavors"</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"selected"</span>\n        <span class=hljs-attr>:options</span>=<span class=hljs-string>"flavours"</span>\n        <span class=hljs-attr>name</span>=<span class=hljs-string>"flavors"</span>\n        <span class=hljs-attr>class</span>=<span class=hljs-string>"ml-4"</span>\n        <span class=hljs-attr>aria-label</span>=<span class=hljs-string>"Individual flavours"</span>\n        <span class=hljs-attr>stacked</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox-group</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n      Selected: <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ selected }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>br</span>&gt;</span>\n      All Selected: <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ allSelected }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>br</span>&gt;</span>\n      Indeterminate: <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ indeterminate }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>flavours</span>: [<span class=hljs-string>\'Orange\'</span>, <span class=hljs-string>\'Grape\'</span>, <span class=hljs-string>\'Apple\'</span>, <span class=hljs-string>\'Lime\'</span>, <span class=hljs-string>\'Very Berry\'</span>],\n        <span class=hljs-attr>selected</span>: [],\n        <span class=hljs-attr>allSelected</span>: <span class=hljs-literal>false</span>,\n        <span class=hljs-attr>indeterminate</span>: <span class=hljs-literal>false</span>\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      toggleAll(checked) {\n        <span class=hljs-keyword>this</span>.selected = checked ? <span class=hljs-keyword>this</span>.flavours.slice() : []\n      }\n    },\n    <span class=hljs-attr>watch</span>: {\n      selected(newVal, oldVal) {\n        <span class=hljs-comment>// Handle changes in individual flavour checkboxes</span>\n        <span class=hljs-keyword>if</span> (newVal.length === <span class=hljs-number>0</span>) {\n          <span class=hljs-keyword>this</span>.indeterminate = <span class=hljs-literal>false</span>\n          <span class=hljs-keyword>this</span>.allSelected = <span class=hljs-literal>false</span>\n        } <span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (newVal.length === <span class=hljs-keyword>this</span>.flavours.length) {\n          <span class=hljs-keyword>this</span>.indeterminate = <span class=hljs-literal>false</span>\n          <span class=hljs-keyword>this</span>.allSelected = <span class=hljs-literal>true</span>\n        } <span class=hljs-keyword>else</span> {\n          <span class=hljs-keyword>this</span>.indeterminate = <span class=hljs-literal>true</span>\n          <span class=hljs-keyword>this</span>.allSelected = <span class=hljs-literal>false</span>\n        }\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-checkbox-indeterminate-multiple.vue --&gt;</span></pre></div><p><strong>Note:</strong> indeterminate is not supported in <code class=text-nowrap translate=no>button</code> mode, nor in multiple checkbox mode. Also pay attention that plain checkbox (i.e. with prop <code class=text-nowrap translate=no>plain</code>) also supports indeterminate state on Windows/Linux/Mac/Android, but not on iOS.</p> <h3 id=indeterminate-state-and-accessibility class=bv-no-focus-ring><span class=bd-content-title>Indeterminate state and accessibility<a class=anchorjs-link href=#indeterminate-state-and-accessibility aria-labelledby=indeterminate-state-and-accessibility></a></span></h3> <p>Not all screen readers will convey the indeterminate state to screen reader users. So it is recommended to provide some form of textual feedback to the user (possibly by via the <code class=text-nowrap translate=no>.sr-only</code> class) if the indeterminate state has special contextual meaning in your application.</p> '}}]);