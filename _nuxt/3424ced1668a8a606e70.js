(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{420:function(n,t){n.exports='<h1 id=form-tags class=bv-no-focus-ring><span class=bd-content-title>Form Tags</span></h1> <p class=bd-lead>Lightweight custom tagged input form control, with options for customized interface rendering, duplicate tag detection and optional tag validation.</p> <p>Tags are arrays of short strings, used in various ways such as assigning categories. Use the default user interface, or create your own custom interface via the use of the default scoped slot.</p> <h2 id=basic-usage class=bv-no-focus-ring><span class=bd-content-title>Basic usage<a class=anchorjs-link href=#basic-usage aria-labelledby=basic-usage></a></span></h2> <p>Tags will have any leading and tailing whitespace removed, and duplicate tags are not permitted. Tags that contain spaces are permitted by default.</p> <p>Tags are added by clicking the <strong>Add</strong> button, pressing the <kbd class=notranslate translate=no>Enter</kbd> key or optionally when the <code class=text-nowrap translate=no>change</code> event fires on the new tag input (i.e. when focus moves from the input). The <strong>Add</strong> button will only appear when the user has entered a new tag value.</p> <p><strong>Default render:</strong></p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>label</span> <span class=hljs-attr>for</span>=<span class=hljs-string>"tags-basic"</span>&gt;</span>Type a new tag and press enter<span class=hljs-tag>&lt;/<span class=hljs-name>label</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span> <span class=hljs-attr>input-id</span>=<span class=hljs-string>"tags-basic"</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>Value: {{ value }}<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>value</span>: [<span class=hljs-string>\'apple\'</span>, <span class=hljs-string>\'orange\'</span>]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-tags-example.vue --&gt;</span></pre></div><p>You can disable adding a new tag when pressing <kbd class=notranslate translate=no>Enter</kbd> via the <code class=text-nowrap translate=no>no-add-on-enter</code> prop, and enable adding a tag on the input&#39;s <code class=text-nowrap translate=no>change</code> event via the <code class=text-nowrap translate=no>add-on-change</code> prop.</p> <h2 id=tag-creation-using-separators class=bv-no-focus-ring><span class=bd-content-title>Tag creation using separators<a class=anchorjs-link href=#tag-creation-using-separators aria-labelledby=tag-creation-using-separators></a></span></h2> <p>To auto create tags when a separator character is typed (i.e. <kbd class=notranslate translate=no>Space</kbd>, <kbd class=notranslate translate=no>,</kbd>, etc), set the <code class=text-nowrap translate=no>separator</code> prop to the character that will trigger the tag to be added. If multiple separator characters are needed, then include them as a single string (i.e. <code class=text-nowrap translate=no>&#39; ,;&#39;</code>), or an array of characters (i.e. <code class=text-nowrap translate=no>[&#39; &#39;, &#39;,&#39;, &#39;;&#39;]</code>), which will trigger a new tag to be added when <kbd class=notranslate translate=no>Space</kbd>, <kbd class=notranslate translate=no>,</kbd>, <em>or</em> <kbd class=notranslate translate=no>;</kbd> are typed). Separators must be a single character.</p> <p>The following example will auto create a tag when <kbd class=notranslate translate=no>Space</kbd>, <kbd class=notranslate translate=no>,</kbd>, or <kbd class=notranslate translate=no>;</kbd> are typed:</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>label</span> <span class=hljs-attr>for</span>=<span class=hljs-string>"tags-separators"</span>&gt;</span>Enter tags separated by space, comma or semicolon<span class=hljs-tag>&lt;/<span class=hljs-name>label</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span>\n      <span class=hljs-attr>input-id</span>=<span class=hljs-string>"tags-separators"</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span>\n      <span class=hljs-attr>separator</span>=<span class=hljs-string>" ,;"</span>\n      <span class=hljs-attr>placeholder</span>=<span class=hljs-string>"Enter new tags separated by space, comma or semicolon"</span>\n      <span class=hljs-attr>no-add-on-enter</span>\n      <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>\n    &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>Value: {{ value }}<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>value</span>: [<span class=hljs-string>\'one\'</span>, <span class=hljs-string>\'two\'</span>]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-tags-separator.vue --&gt;</span></pre></div><h2 id=last-tag-removal-via-backspace-keypress class=bv-no-focus-ring><span class=bd-content-title>Last tag removal via backspace keypress<a class=anchorjs-link href=#last-tag-removal-via-backspace-keypress aria-labelledby=last-tag-removal-via-backspace-keypress></a></span></h2> <p>When the prop <code class=text-nowrap translate=no>remove-on-delete</code> is set, and the user presses <kbd class=notranslate translate=no>Backspace</kbd> (or <kbd class=notranslate translate=no>Del</kbd>) <em>and</em> the input value is empty, the last tag in the tag list will be removed.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>label</span> <span class=hljs-attr>for</span>=<span class=hljs-string>"tags-remove-on-delete"</span>&gt;</span>Enter new tags separated by space<span class=hljs-tag>&lt;/<span class=hljs-name>label</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span>\n      <span class=hljs-attr>input-id</span>=<span class=hljs-string>"tags-remove-on-delete"</span>\n      <span class=hljs-attr>:input-attrs</span>=<span class=hljs-string>"{ \'aria-describedby\': \'tags-remove-on-delete-help\' }"</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span>\n      <span class=hljs-attr>separator</span>=<span class=hljs-string>" "</span>\n      <span class=hljs-attr>placeholder</span>=<span class=hljs-string>"Enter new tags separated by space"</span>\n      <span class=hljs-attr>remove-on-delete</span>\n      <span class=hljs-attr>no-add-on-enter</span>\n      <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>\n    &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-text</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"tags-remove-on-delete-help"</span>&gt;</span>\n      Press <span class=hljs-tag>&lt;<span class=hljs-name>kbd</span>&gt;</span>Backspace<span class=hljs-tag>&lt;/<span class=hljs-name>kbd</span>&gt;</span> to remove the last tag entered\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-text</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>Value: {{ value }}<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>value</span>: [<span class=hljs-string>\'apple\'</span>, <span class=hljs-string>\'orange\'</span>, <span class=hljs-string>\'grape\'</span>]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-tags-remove-on-delete.vue --&gt;</span></pre></div><h2 id=styling-options class=bv-no-focus-ring><span class=bd-content-title>Styling Options<a class=anchorjs-link href=#styling-options aria-labelledby=styling-options></a></span></h2> <p>Several props are available to alter the basic styling of the default tagged interface:</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Prop</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>tag-pills</code></td> <td>Renders the tags with the appearance of pills</td> </tr> <tr> <td><code class=text-nowrap translate=no>tag-variant</code></td> <td>Applies one of the Bootstrap contextual variant theme colors to the tags</td> </tr> <tr> <td><code class=text-nowrap translate=no>size</code></td> <td>Set the size of the component&#39;s appearance. &#39;sm&#39;, &#39;md&#39; (default), or &#39;lg&#39;</td> </tr> <tr> <td><code class=text-nowrap translate=no>placeholder</code></td> <td>The placeholder text for the new tag input element</td> </tr> <tr> <td><code class=text-nowrap translate=no>state</code></td> <td>Sets the contextual state of the control. Set to <code class=text-nowrap translate=no>true</code> (for valid), <code class=text-nowrap translate=no>false</code> (for invalid), or <code class=text-nowrap translate=no>null</code></td> </tr> <tr> <td><code class=text-nowrap translate=no>disabled</code></td> <td>Places the component in a disabled state</td> </tr> </tbody></table> </div><p>For additional props, see the component reference section at the bottom of this page.</p> <p>The focus and validation state styling of the component relies upon BootstrapVue&#39;s custom CSS.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>label</span> <span class=hljs-attr>for</span>=<span class=hljs-string>"tags-pills"</span>&gt;</span>Enter tags<span class=hljs-tag>&lt;/<span class=hljs-name>label</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span>\n      <span class=hljs-attr>input-id</span>=<span class=hljs-string>"tags-pills"</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span>\n      <span class=hljs-attr>tag-variant</span>=<span class=hljs-string>"primary"</span>\n      <span class=hljs-attr>tag-pills</span>\n      <span class=hljs-attr>size</span>=<span class=hljs-string>"lg"</span>\n      <span class=hljs-attr>separator</span>=<span class=hljs-string>" "</span>\n      <span class=hljs-attr>placeholder</span>=<span class=hljs-string>"Enter new tags separated by space"</span>\n      <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>\n    &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>Value: {{ value }}<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>value</span>: [<span class=hljs-string>\'apple\'</span>, <span class=hljs-string>\'orange\'</span>, <span class=hljs-string>\'grape\'</span>]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-tags-style-options.vue --&gt;</span></pre></div><h2 id=using-with-native-browser-form-submission class=bv-no-focus-ring><span class=bd-content-title>Using with native browser <code class=text-nowrap translate=no>&lt;form&gt;</code> submission<a class=anchorjs-link href=#using-with-native-browser-form-submission aria-labelledby=using-with-native-browser-form-submission></a></span></h2> <p>The value of the tagged input will not be submitted via standard form <code class=text-nowrap translate=no>action</code> unless you provide a name via the <code class=text-nowrap translate=no>name</code> prop. When a name is provided, <code class=text-nowrap translate=no>&lt;b-form-tags&gt;</code> will create a hidden <code class=text-nowrap translate=no>&lt;input&gt;</code> for each tag. The hidden input will have the <code class=text-nowrap translate=no>name</code> attribute set to the value of the <code class=text-nowrap translate=no>name</code> prop.</p> <p>The hidden inputs will also be generated when using <a href=#custom-rendering-with-default-scoped-slot class=font-weight-bold>custom rendering</a> (when the <code class=text-nowrap translate=no>name</code> prop is set).</p> <h2 id=tag-validation class=bv-no-focus-ring><span class=bd-content-title>Tag validation<a class=anchorjs-link href=#tag-validation aria-labelledby=tag-validation></a></span></h2> <p>By default, <code class=text-nowrap translate=no>&lt;b-form-tags&gt;</code> detects when the user is attempting to enter a (case-sensitive) duplicate tag, and will provide integrated feedback to the user.</p> <p>You can optionally provide a tag validator method via the <code class=text-nowrap translate=no>tag-validator</code> prop. The validator function will receive one argument which is the tag being added, and should return either <code class=text-nowrap translate=no>true</code> if the tag passes validation and can be added, or <code class=text-nowrap translate=no>false</code> if the tag fails validation (in which case it is not added to the array of tags). integrated feedback will be provided to the user listing the invalid tag(s) that could not be added.</p> <p>Tag validation occurs only for tags added via user input. Changes to the tags via the <code class=text-nowrap translate=no>v-model</code> are not validated.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>:state</span>=<span class=hljs-string>"state"</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Tags validation example"</span> <span class=hljs-attr>label-for</span>=<span class=hljs-string>"tags-validation"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span>\n        <span class=hljs-attr>input-id</span>=<span class=hljs-string>"tags-validation"</span>\n        <span class=hljs-attr>:input-attrs</span>=<span class=hljs-string>"{ \'aria-describedby\': \'tags-validation-help\' }"</span>\n        <span class=hljs-attr>v-model</span>=<span class=hljs-string>"tags"</span>\n        <span class=hljs-attr>:state</span>=<span class=hljs-string>"state"</span>\n        <span class=hljs-attr>:tag-validator</span>=<span class=hljs-string>"tagValidator"</span>\n        <span class=hljs-attr>separator</span>=<span class=hljs-string>" "</span>\n      &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n      <span class=hljs-comment>&lt;!-- The following slots are for b-form-group --&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:invalid-feedback</span>&gt;</span>\n        You must provide at least 3 tags and no more than 8\n      <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:description</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"tags-validation-help"</span>&gt;</span>\n         Tags must be 3 to 5 characters in length and all lower\n         case. Enter tags separated by spaces or press enter.\n        <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>tags</span>: [],\n        <span class=hljs-attr>dirty</span>: <span class=hljs-literal>false</span>\n      }\n    },\n    <span class=hljs-attr>computed</span>: {\n      state() {\n        <span class=hljs-comment>// Overall component validation state</span>\n        <span class=hljs-keyword>return</span> <span class=hljs-keyword>this</span>.dirty ? (<span class=hljs-keyword>this</span>.tags.length &gt; <span class=hljs-number>2</span> &amp;&amp; <span class=hljs-keyword>this</span>.tags.length &lt; <span class=hljs-number>9</span>) : <span class=hljs-literal>null</span>\n      }\n    },\n    <span class=hljs-attr>watch</span>: {\n      tags(newVal, oldVal) {\n        <span class=hljs-comment>// Set the dirty flag on first change to the tags array</span>\n        <span class=hljs-keyword>this</span>.dirty = <span class=hljs-literal>true</span>\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      tagValidator(tag) {\n        <span class=hljs-comment>// Individual tag validator function</span>\n        <span class=hljs-keyword>return</span> tag === tag.toLowerCase() &amp;&amp; tag.length &gt; <span class=hljs-number>2</span> &amp;&amp; tag.length &lt; <span class=hljs-number>6</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-tags-validation-feedback.vue --&gt;</span></pre></div><h3 id=detecting-new-invalid-and-duplicate-tags class=bv-no-focus-ring><span class=bd-content-title>Detecting new, invalid, and duplicate tags<a class=anchorjs-link href=#detecting-new-invalid-and-duplicate-tags aria-labelledby=detecting-new-invalid-and-duplicate-tags></a></span></h3> <p>The event <code class=text-nowrap translate=no>tag-state</code> will be emitted whenever new tags are entered into the new tag input element, tags that do not pass validation, or duplicate tags are detected. The event handler will receive three arrays as its arguments:</p> <ul> <li><code class=text-nowrap translate=no>validTags</code> (tags that pass validation)</li> <li><code class=text-nowrap translate=no>invalidTags</code> (tags that do not pass validation)</li> <li><code class=text-nowrap translate=no>duplicateTags</code> (tags that would be a duplicate of existing or validTags).</li> </ul> <p>The event will be emitted only when the new tag input changes (characters are entered that would be considered part of a tag), or when the user attempts to add a tag (i.e. via <kbd class=notranslate translate=no>Enter</kbd>, clicking the <strong>Add</strong> button, or entering a separator). The three arrays will be empty when the user clears the new tag input element (or contains just spaces).</p> <p>If you are providing your own feedback for duplicate and invalid tags (via the use of the <code class=text-nowrap translate=no>tag-state</code> event) outside of the <code class=text-nowrap translate=no>&lt;b-form-tags&gt;</code> component, you can disable the built in duplicate and invalid messages by setting the props <code class=text-nowrap translate=no>duplicate-tag-text</code> and <code class=text-nowrap translate=no>invalid-tag-text</code> (respectively) to either an empty string (<code class=text-nowrap translate=no>&#39;&#39;</code>) or <code class=text-nowrap translate=no>null</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>label</span> <span class=hljs-attr>for</span>=<span class=hljs-string>"tags-state-event"</span>&gt;</span>Enter tags<span class=hljs-tag>&lt;/<span class=hljs-name>label</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span>\n      <span class=hljs-attr>input-id</span>=<span class=hljs-string>"tags-state-event"</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"tags"</span>\n      <span class=hljs-attr>:tag-validator</span>=<span class=hljs-string>"validator"</span>\n      <span class=hljs-attr>placeholder</span>=<span class=hljs-string>"Enter tags (3-5 characters) separated by space"</span>\n      <span class=hljs-attr>separator</span>=<span class=hljs-string>" "</span>\n      @<span class=hljs-attr>tag-state</span>=<span class=hljs-string>"onTagState"</span>\n    &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-2"</span>&gt;</span>Tags: {{ tags }}<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>Event values:<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>ul</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>validTags: {{ validTags }}<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>invalidTags: {{ invalidTags }}<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>duplicateTags: {{ duplicateTags }}<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>tags</span>: [],\n        <span class=hljs-attr>validTags</span>: [],\n        <span class=hljs-attr>invalidTags</span>: [],\n        <span class=hljs-attr>duplicateTags</span>: []\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      onTagState(valid, invalid, duplicate) {\n        <span class=hljs-keyword>this</span>.validTags = valid\n        <span class=hljs-keyword>this</span>.invalidTags = invalid\n        <span class=hljs-keyword>this</span>.duplicateTags = duplicate\n      },\n      validator(tag) {\n        <span class=hljs-keyword>return</span> tag.length &gt; <span class=hljs-number>2</span> &amp;&amp; tag.length &lt; <span class=hljs-number>6</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-tags-tags-state-event.vue --&gt;</span></pre></div><h2 id=custom-rendering-with-default-scoped-slot class=bv-no-focus-ring><span class=bd-content-title>Custom rendering with default scoped slot<a class=anchorjs-link href=#custom-rendering-with-default-scoped-slot aria-labelledby=custom-rendering-with-default-scoped-slot></a></span></h2> <p>If you fancy a different look and feel for the tags control, you can provide your own custom rendering via the default scoped slot. You can either create your own tags, or use our helper <code class=text-nowrap translate=no>&lt;b-form-tag&gt;</code> component.</p> <h3 id=scope-properties class=bv-no-focus-ring><span class=bd-content-title>Scope properties<a class=anchorjs-link href=#scope-properties aria-labelledby=scope-properties></a></span></h3> <p>The default scoped slot provides numerous properties and methods for use in rendering your custom interface. Not all properties or methods are required to generate your interface.</p> <p>The default slot scope properties are as follows:</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>tags</code></td> <td>Array</td> <td>Array of current tag strings</td> </tr> <tr> <td><code class=text-nowrap translate=no>inputAttrs</code></td> <td>Object</td> <td>Object of attributes to apply to the new tag input element via <code class=text-nowrap translate=no>v-bind=&quot;inputAttrs&quot;</code>. See below for details</td> </tr> <tr> <td><code class=text-nowrap translate=no>inputType</code></td> <td>String</td> <td><span class="badge badge-secondary">v2.3.0+</span> Type of input to render (normalized version of prop <code class=text-nowrap translate=no>input-type</code>)</td> </tr> <tr> <td><code class=text-nowrap translate=no>inputHandlers</code></td> <td>Object</td> <td>Object of event handlers to apply to the new tag input element via <code class=text-nowrap translate=no>v-on=&quot;inputHandlers&quot;</code>. See below for details</td> </tr> <tr> <td><code class=text-nowrap translate=no>removeTag</code></td> <td>Function</td> <td>Method to remove a tag. Accepts one argument which is the tag value to remove</td> </tr> <tr> <td><code class=text-nowrap translate=no>addTag</code></td> <td>Function</td> <td>Method to add a new tag. Assumes the tag is the value of the input, but optionally accepts one argument which is the tag value to be added</td> </tr> <tr> <td><code class=text-nowrap translate=no>inputId</code></td> <td>String</td> <td>ID to add to the new tag input element. Defaults to prop <code class=text-nowrap translate=no>input-id</code>. If not provided a unique ID is auto-generated. Also available via &#39;inputAttrs.id&#39;</td> </tr> <tr> <td><code class=text-nowrap translate=no>isInvalid</code></td> <td>Boolean</td> <td><code class=text-nowrap translate=no>true</code> if the user input contains invalid tag(s)</td> </tr> <tr> <td><code class=text-nowrap translate=no>invalidTags</code></td> <td>Array</td> <td>Array of the invalid tag(s) the user has entered</td> </tr> <tr> <td><code class=text-nowrap translate=no>isDuplicate</code></td> <td>Boolean</td> <td><code class=text-nowrap translate=no>true</code> if the user input contains duplicate tag(s)</td> </tr> <tr> <td><code class=text-nowrap translate=no>duplicateTags</code></td> <td>Array</td> <td>Array of the duplicate tag(s) the user has entered</td> </tr> <tr> <td><code class=text-nowrap translate=no>disableAddButton</code></td> <td>Boolean</td> <td>Will be <code class=text-nowrap translate=no>true</code> if the tag(s) in the input cannot be added (all invalid and/or duplicates)</td> </tr> <tr> <td><code class=text-nowrap translate=no>disabled</code></td> <td>Boolean</td> <td><code class=text-nowrap translate=no>true</code> if the component is in the disabled state. Value of the <code class=text-nowrap translate=no>disabled</code> prop</td> </tr> <tr> <td><code class=text-nowrap translate=no>state</code></td> <td>Boolean</td> <td>The contextual state of the component. Value of the <code class=text-nowrap translate=no>state</code> prop. Possible values are <code class=text-nowrap translate=no>true</code>, <code class=text-nowrap translate=no>false</code> or <code class=text-nowrap translate=no>null</code></td> </tr> <tr> <td><code class=text-nowrap translate=no>size</code></td> <td>String</td> <td>The value of the <code class=text-nowrap translate=no>size</code> prop</td> </tr> <tr> <td><code class=text-nowrap translate=no>separator</code></td> <td>String</td> <td>The value of the <code class=text-nowrap translate=no>separator</code> prop</td> </tr> <tr> <td><code class=text-nowrap translate=no>placeholder</code></td> <td>String</td> <td>The value of the <code class=text-nowrap translate=no>placeholder</code> prop</td> </tr> <tr> <td><code class=text-nowrap translate=no>tagRemoveLabel</code></td> <td>String</td> <td>Value of the <code class=text-nowrap translate=no>tag-remove-label</code> prop. Used as the <code class=text-nowrap translate=no>aria-label</code> attribute on the remove button of tags</td> </tr> <tr> <td><code class=text-nowrap translate=no>tagVariant</code></td> <td>String</td> <td>The value of the <code class=text-nowrap translate=no>tag-variant</code> prop</td> </tr> <tr> <td><code class=text-nowrap translate=no>tagClass</code></td> <td>String, Array, or Object</td> <td>The value of the <code class=text-nowrap translate=no>tag-variant</code> prop. Class (or classes) to apply to the tag elements</td> </tr> <tr> <td><code class=text-nowrap translate=no>addButtonText</code></td> <td>String</td> <td>The value of the <code class=text-nowrap translate=no>add-button-text</code> prop</td> </tr> <tr> <td><code class=text-nowrap translate=no>addButtonVariant</code></td> <td>String</td> <td>The value of the <code class=text-nowrap translate=no>add-button-variant</code> prop</td> </tr> </tbody></table> </div><h4 id=inputattrs-object-properties class=bv-no-focus-ring><span class=bd-content-title><code class=text-nowrap translate=no>inputAttrs</code> object properties<a class=anchorjs-link href=#inputattrs-object-properties aria-labelledby=inputattrs-object-properties></a></span></h4> <p>The <code class=text-nowrap translate=no>inputAttrs</code> object contains attributes to bind (<code class=text-nowrap translate=no>v-bind</code>) to the new tag input element.</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>id</code></td> <td>String</td> <td>the <code class=text-nowrap translate=no>id</code> attribute for the new tag input</td> </tr> <tr> <td><code class=text-nowrap translate=no>value</code></td> <td>String</td> <td>The <code class=text-nowrap translate=no>value</code> attribute for the new tag input</td> </tr> <tr> <td><code class=text-nowrap translate=no>disabled</code></td> <td>Boolean</td> <td>The <code class=text-nowrap translate=no>disabled</code> attribute for the new tag input. Value of the <code class=text-nowrap translate=no>disabled</code> prop</td> </tr> <tr> <td><code class=text-nowrap translate=no>form</code></td> <td>String</td> <td>The <code class=text-nowrap translate=no>form</code> attribute for the new tag input. Value of the <code class=text-nowrap translate=no>form</code> prop</td> </tr> </tbody></table> </div><p>The <code class=text-nowrap translate=no>inputAttrs</code> object will also include any attributes set via the <code class=text-nowrap translate=no>input-attrs</code> prop. Note that the above attributes take precedence over any of the same attributes specified in the <code class=text-nowrap translate=no>input-attrs</code> prop.</p> <h4 id=inputhandlers-object-properties class=bv-no-focus-ring><span class=bd-content-title><code class=text-nowrap translate=no>inputHandlers</code> object properties<a class=anchorjs-link href=#inputhandlers-object-properties aria-labelledby=inputhandlers-object-properties></a></span></h4> <p>The <code class=text-nowrap translate=no>inputHandlers</code> object contains event handlers to bind (<code class=text-nowrap translate=no>v-on</code>) to the new tag input element.</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Property</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>input</code></td> <td>Function</td> <td>Event handler for the input element <code class=text-nowrap translate=no>input</code> event. Accepts a single argument of either an event object or a string. Updates the internal v-model for the new tag input element</td> </tr> <tr> <td><code class=text-nowrap translate=no>change</code></td> <td>Function</td> <td>Event handler for the input element <code class=text-nowrap translate=no>change</code> event. Accepts a single argument of either an event object or a string. Change will trigger adding the tag.</td> </tr> <tr> <td><code class=text-nowrap translate=no>keydown</code></td> <td>Function</td> <td>Event handler for the input element <code class=text-nowrap translate=no>keydown</code> <kbd class=notranslate translate=no>Enter</kbd> and <kbd class=notranslate translate=no>Del</kbd> events. Accepts a single argument which is the native keydown event object</td> </tr> </tbody></table> </div><p>The <code class=text-nowrap translate=no>change</code> handler, when needed, must be enabled via the <code class=text-nowrap translate=no>add-on-change</code> prop, otherwise it is a noop method.</p> <h3 id=using-native-browser-inputs class=bv-no-focus-ring><span class=bd-content-title>Using native browser inputs<a class=anchorjs-link href=#using-native-browser-inputs aria-labelledby=using-native-browser-inputs></a></span></h3> <p>The scope contains attributes and event handlers that can be directly bound to native <code class=text-nowrap translate=no>&lt;input&gt;</code> or <code class=text-nowrap translate=no>&lt;select&gt;</code> elements.</p> <p>The following example includes the suggested ARIA attributes and roles needed for screen-reader support.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span> <span class=hljs-attr>no-outer-focus</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot</span>=<span class=hljs-string>"{ tags, inputAttrs, inputHandlers, addTag, removeTag }"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-input-group</span> <span class=hljs-attr>aria-controls</span>=<span class=hljs-string>"my-custom-tags-list"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>input</span>\n            <span class=hljs-attr>v-bind</span>=<span class=hljs-string>"inputAttrs"</span>\n            <span class=hljs-attr>v-on</span>=<span class=hljs-string>"inputHandlers"</span>\n            <span class=hljs-attr>placeholder</span>=<span class=hljs-string>"New tag - Press enter to add"</span>\n            <span class=hljs-attr>class</span>=<span class=hljs-string>"form-control"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-input-group-append</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"addTag()"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"primary"</span>&gt;</span>Add<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-input-group-append</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-input-group</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>ul</span>\n          <span class=hljs-attr>id</span>=<span class=hljs-string>"my-custom-tags-list"</span>\n          <span class=hljs-attr>class</span>=<span class=hljs-string>"list-unstyled d-inline-flex flex-wrap mb-0"</span>\n          <span class=hljs-attr>aria-live</span>=<span class=hljs-string>"polite"</span>\n          <span class=hljs-attr>aria-atomic</span>=<span class=hljs-string>"false"</span>\n          <span class=hljs-attr>aria-relevant</span>=<span class=hljs-string>"additions removals"</span>\n        &gt;</span>\n          <span class=hljs-comment>&lt;!-- Always use the tag value as the :key, not the index! --&gt;</span>\n          <span class=hljs-comment>&lt;!-- Otherwise screen readers will not read the tag\n               additions and removals correctly --&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-card</span>\n            <span class=hljs-attr>v-for</span>=<span class=hljs-string>"tag in tags"</span>\n            <span class=hljs-attr>:key</span>=<span class=hljs-string>"tag"</span>\n            <span class=hljs-attr>:id</span>=<span class=hljs-string>"`my-custom-tags-tag_${tag.replace(/\\s/g, \'_\')}_`"</span>\n            <span class=hljs-attr>tag</span>=<span class=hljs-string>"li"</span>\n            <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-1 mr-1"</span>\n            <span class=hljs-attr>body-class</span>=<span class=hljs-string>"py-1 pr-2 text-nowrap"</span>\n          &gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>{{ tag }}<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span>\n              @<span class=hljs-attr>click</span>=<span class=hljs-string>"removeTag(tag)"</span>\n              <span class=hljs-attr>variant</span>=<span class=hljs-string>"link"</span>\n              <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span>\n              <span class=hljs-attr>:aria-controls</span>=<span class=hljs-string>"`my-custom-tags-tag_${tag.replace(/\\s/g, \'_\')}_`"</span>\n            &gt;</span>remove<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-card</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>value</span>: [<span class=hljs-string>\'apple\'</span>, <span class=hljs-string>\'orange\'</span>, <span class=hljs-string>\'banana\'</span>, <span class=hljs-string>\'pear\'</span>, <span class=hljs-string>\'peach\'</span>]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-tags-custom-native.vue --&gt;</span></pre></div><h3 id=using-custom-form-components class=bv-no-focus-ring><span class=bd-content-title>Using custom form components<a class=anchorjs-link href=#using-custom-form-components aria-labelledby=using-custom-form-components></a></span></h3> <p>The scope contains attributes and event handlers that can be directly bound to <em>most</em> custom inputs or select components (the event handlers accept either a string tag value <em>or</em> a native event object). Any component that emits <code class=text-nowrap translate=no>input</code> as characters are typed, and (optionally) emits <code class=text-nowrap translate=no>change</code> when the input value changes (i.e on blur or select), and uses the prop <code class=text-nowrap translate=no>value</code> as the v-model, should work without modification.</p> <p>In this example, we are using the <a href=#b-form-tag-helper-component class=font-weight-bold><code class=text-nowrap translate=no>&lt;b-form-tag&gt;</code> helper component</a>, but feel free to render tags using standard HTML or components.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span> <span class=hljs-attr>no-outer-focus</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot</span>=<span class=hljs-string>"{ tags, inputAttrs, inputHandlers, tagVariant, addTag, removeTag }"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-input-group</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-form-input</span>\n            <span class=hljs-attr>v-bind</span>=<span class=hljs-string>"inputAttrs"</span>\n            <span class=hljs-attr>v-on</span>=<span class=hljs-string>"inputHandlers"</span>\n            <span class=hljs-attr>placeholder</span>=<span class=hljs-string>"New tag - Press enter to add"</span>\n            <span class=hljs-attr>class</span>=<span class=hljs-string>"form-control"</span>\n          &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-input</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-input-group-append</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"addTag()"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"primary"</span>&gt;</span>Add<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-input-group-append</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-input-group</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"d-inline-block"</span> <span class=hljs-attr>style</span>=<span class=hljs-string>"font-size: 1.5rem;"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tag</span>\n            <span class=hljs-attr>v-for</span>=<span class=hljs-string>"tag in tags"</span>\n            @<span class=hljs-attr>remove</span>=<span class=hljs-string>"removeTag(tag)"</span>\n            <span class=hljs-attr>:key</span>=<span class=hljs-string>"tag"</span>\n            <span class=hljs-attr>:title</span>=<span class=hljs-string>"tag"</span>\n            <span class=hljs-attr>:variant</span>=<span class=hljs-string>"tagVariant"</span>\n            <span class=hljs-attr>class</span>=<span class=hljs-string>"mr-1"</span>\n          &gt;</span>{{ tag }}<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tag</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>value</span>: [<span class=hljs-string>\'apple\'</span>, <span class=hljs-string>\'orange\'</span>, <span class=hljs-string>\'banana\'</span>]\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-tags-custom-components-input.vue --&gt;</span></pre></div><p>The following is an example of using a custom select component for choosing from a pre-defined set of tags:</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Tagged input using select"</span>&gt;</span>\n      <span class=hljs-comment>&lt;!-- prop `add-on-change` is needed to enable adding tags vie the `change` event --&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"lg"</span> <span class=hljs-attr>add-on-change</span> <span class=hljs-attr>no-outer-focus</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot</span>=<span class=hljs-string>"{ tags, inputAttrs, inputHandlers, disabled, removeTag }"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>v-if</span>=<span class=hljs-string>"tags.length &gt; 0"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"list-inline d-inline-block mb-2"</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>li</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>"tag in tags"</span> <span class=hljs-attr>:key</span>=<span class=hljs-string>"tag"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"list-inline-item"</span>&gt;</span>\n              <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tag</span>\n                @<span class=hljs-attr>remove</span>=<span class=hljs-string>"removeTag(tag)"</span>\n                <span class=hljs-attr>:title</span>=<span class=hljs-string>"tag"</span>\n                <span class=hljs-attr>:disabled</span>=<span class=hljs-string>"disabled"</span>\n                <span class=hljs-attr>variant</span>=<span class=hljs-string>"info"</span>\n              &gt;</span>{{ tag }}<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tag</span>&gt;</span>\n            <span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-form-select</span>\n            <span class=hljs-attr>v-bind</span>=<span class=hljs-string>"inputAttrs"</span>\n            <span class=hljs-attr>v-on</span>=<span class=hljs-string>"inputHandlers"</span>\n            <span class=hljs-attr>:disabled</span>=<span class=hljs-string>"disabled || availableOptions.length === 0"</span>\n            <span class=hljs-attr>:options</span>=<span class=hljs-string>"availableOptions"</span>\n          &gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:first</span>&gt;</span>\n              <span class=hljs-comment>&lt;!-- This is required to prevent bugs with Safari --&gt;</span>\n              <span class=hljs-tag>&lt;<span class=hljs-name>option</span> <span class=hljs-attr>disabled</span> <span class=hljs-attr>value</span>=<span class=hljs-string>""</span>&gt;</span>Choose a tag...<span class=hljs-tag>&lt;/<span class=hljs-name>option</span>&gt;</span>\n            <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-select</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>options</span>: [<span class=hljs-string>\'Apple\'</span>, <span class=hljs-string>\'Orange\'</span>, <span class=hljs-string>\'Banana\'</span>, <span class=hljs-string>\'Lime\'</span>, <span class=hljs-string>\'Peach\'</span>, <span class=hljs-string>\'Chocolate\'</span>, <span class=hljs-string>\'Strawberry\'</span>],\n        <span class=hljs-attr>value</span>: []\n      }\n    },\n    <span class=hljs-attr>computed</span>: {\n      availableOptions() {\n        <span class=hljs-keyword>return</span> <span class=hljs-keyword>this</span>.options.filter(<span class=hljs-function><span class=hljs-params>opt</span> =&gt;</span> <span class=hljs-keyword>this</span>.value.indexOf(opt) === <span class=hljs-number>-1</span>)\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-tags-components-select.vue --&gt;</span></pre></div><p>If the custom input is using custom event names that mimic <code class=text-nowrap translate=no>input</code> and <code class=text-nowrap translate=no>change</code>, and/or needs the <code class=text-nowrap translate=no>.native</code> modifier for keydown, you can do something similar to below to bind the event handlers:</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:default</span>=<span class=hljs-string>"{ inputAttrs, inputHandlers, removeTag, tags }"</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>custom-input</span>\n    <span class=hljs-attr>:id</span>=<span class=hljs-string>"inputAttrs.id"</span>\n    <span class=hljs-attr>:vistom-value-prop</span>=<span class=hljs-string>"inputAttrs.value"</span>\n    @<span class=hljs-attr>custom-input-event</span>=<span class=hljs-string>"inputHandlers.input($event)"</span>\n    @<span class=hljs-attr>custom-change-event</span>=<span class=hljs-string>"inputHandlers.change($event)"</span>\n    @<span class=hljs-attr>keydown.native</span>=<span class=hljs-string>"inputHandlers.keydown($event)"</span>\n  &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>custom-input</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>"tag in tags"</span>&gt;</span>\n    <span class=hljs-comment>&lt;!-- Your custom tag list here --&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span></pre></div><p>The <code class=text-nowrap translate=no>inputHandlers.input</code> handler <strong>must</strong> be bound to an event that updates with each character entered by the user for the <em>as-you-type</em> tag validation to work.</p> <h3 id=advanced-custom-rendering-usage class=bv-no-focus-ring><span class=bd-content-title>Advanced custom rendering usage<a class=anchorjs-link href=#advanced-custom-rendering-usage aria-labelledby=advanced-custom-rendering-usage></a></span></h3> <p>In situations where the <code class=text-nowrap translate=no>inputHandlers</code> will not work with your custom input, or if you need greater control over tag creation, you can take advantage of the additional properties provided via the default slot&#39;s scope.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-checkbox</span> <span class=hljs-attr>switch</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"lg"</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"disabled"</span>&gt;</span>Disable<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-checkbox</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span>\n      @<span class=hljs-attr>input</span>=<span class=hljs-string>"resetInputValue()"</span>\n      <span class=hljs-attr>tag-variant</span>=<span class=hljs-string>"success"</span>\n      <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2 mt-2"</span>\n      <span class=hljs-attr>:disabled</span>=<span class=hljs-string>"disabled"</span>\n      <span class=hljs-attr>no-outer-focus</span>\n      <span class=hljs-attr>placeholder</span>=<span class=hljs-string>"Enter a new tag value and click Add"</span>\n      <span class=hljs-attr>:state</span>=<span class=hljs-string>"state"</span>\n    &gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot</span>=<span class=hljs-string>"{tags, inputId, placeholder, disabled, addTag, removeTag }"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-input-group</span>&gt;</span>\n          <span class=hljs-comment>&lt;!-- Always bind the id to the input so that it can be focused when needed --&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-form-input</span>\n            <span class=hljs-attr>v-model</span>=<span class=hljs-string>"newTag"</span>\n            <span class=hljs-attr>:id</span>=<span class=hljs-string>"inputId"</span>\n            <span class=hljs-attr>:placeholder</span>=<span class=hljs-string>"placeholder"</span>\n            <span class=hljs-attr>:disabled</span>=<span class=hljs-string>"disabled"</span>\n            <span class=hljs-attr>:formatter</span>=<span class=hljs-string>"formatter"</span>\n          &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-input</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-input-group-append</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"addTag(newTag)"</span> <span class=hljs-attr>:disabled</span>=<span class=hljs-string>"disabled"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"primary"</span>&gt;</span>Add<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-input-group-append</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-input-group</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-form-invalid-feedback</span> <span class=hljs-attr>:state</span>=<span class=hljs-string>"state"</span>&gt;</span>\n          Duplicate tag value cannot be added again!\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-invalid-feedback</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>v-if</span>=<span class=hljs-string>"tags.length &gt; 0"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-0"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>li</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>"tag in tags"</span> <span class=hljs-attr>:key</span>=<span class=hljs-string>"tag"</span> <span class=hljs-attr>:title</span>=<span class=hljs-string>"`Tag: ${tag}`"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-2"</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>span</span>  <span class=hljs-attr>class</span>=<span class=hljs-string>"d-flex align-items-center"</span>&gt;</span>\n              <span class=hljs-tag>&lt;<span class=hljs-name>span</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mr-2"</span>&gt;</span>{{ tag }}<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span>\n              <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span>\n                <span class=hljs-attr>:disabled</span>=<span class=hljs-string>"disabled"</span>\n                <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span>\n                <span class=hljs-attr>variant</span>=<span class=hljs-string>"outline-danger"</span>\n                @<span class=hljs-attr>click</span>=<span class=hljs-string>"removeTag(tag)"</span>\n              &gt;</span>\n                remove tag\n              <span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n            <span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-form-text</span> <span class=hljs-attr>v-else</span>&gt;</span>\n          There are no tags specified. Add a new tag above.\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-text</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>newTag</span>: <span class=hljs-string>\'\'</span>,\n        <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span>,\n        <span class=hljs-attr>value</span>: []\n      }\n    },\n    <span class=hljs-attr>computed</span>: {\n      state() {\n        <span class=hljs-comment>// Return false (invalid) if new tag is a duplicate</span>\n        <span class=hljs-keyword>return</span> <span class=hljs-keyword>this</span>.value.indexOf(<span class=hljs-keyword>this</span>.newTag.trim()) &gt; <span class=hljs-number>-1</span> ? <span class=hljs-literal>false</span> : <span class=hljs-literal>null</span>\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      resetInputValue() {\n        <span class=hljs-keyword>this</span>.newTag = <span class=hljs-string>\'\'</span>\n      },\n      formatter(value) {\n        <span class=hljs-keyword>return</span> value.toUpperCase()\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- form-tags-custom-components-advanced.vue --&gt;</span></pre></div><p>The following is an example of using the <code class=text-nowrap translate=no>&lt;b-dropdown&gt;</code> component for choosing or searching from a pre-defined set of tags:</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span> <span class=hljs-attr>label</span>=<span class=hljs-string>"Tagged input using dropdown"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"value"</span> <span class=hljs-attr>no-outer-focus</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot</span>=<span class=hljs-string>"{ tags, disabled, addTag, removeTag }"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>v-if</span>=<span class=hljs-string>"tags.length &gt; 0"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"list-inline d-inline-block mb-2"</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>li</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>"tag in tags"</span> <span class=hljs-attr>:key</span>=<span class=hljs-string>"tag"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"list-inline-item"</span>&gt;</span>\n              <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tag</span>\n                @<span class=hljs-attr>remove</span>=<span class=hljs-string>"removeTag(tag)"</span>\n                <span class=hljs-attr>:title</span>=<span class=hljs-string>"tag"</span>\n                <span class=hljs-attr>:disabled</span>=<span class=hljs-string>"disabled"</span>\n                <span class=hljs-attr>variant</span>=<span class=hljs-string>"info"</span>\n              &gt;</span>{{ tag }}<span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tag</span>&gt;</span>\n            <span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-dropdown</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"outline-secondary"</span> <span class=hljs-attr>block</span> <span class=hljs-attr>menu-class</span>=<span class=hljs-string>"w-100"</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:button-content</span>&gt;</span>\n              <span class=hljs-tag>&lt;<span class=hljs-name>b-icon</span> <span class=hljs-attr>icon</span>=<span class=hljs-string>"tag-fill"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-icon</span>&gt;</span> Choose tags\n            <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-dropdown-form</span> @<span class=hljs-attr>submit.stop.prevent</span>=<span class=hljs-string>"() =&gt; {}"</span>&gt;</span>\n              <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span>\n                <span class=hljs-attr>label-for</span>=<span class=hljs-string>"tag-search-input"</span>\n                <span class=hljs-attr>label</span>=<span class=hljs-string>"Search tags"</span>\n                <span class=hljs-attr>label-cols-md</span>=<span class=hljs-string>"auto"</span>\n                <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-0"</span>\n                <span class=hljs-attr>label-size</span>=<span class=hljs-string>"sm"</span>\n                <span class=hljs-attr>:description</span>=<span class=hljs-string>"searchDesc"</span>\n                <span class=hljs-attr>:disabled</span>=<span class=hljs-string>"disabled"</span>\n              &gt;</span>\n                <span class=hljs-tag>&lt;<span class=hljs-name>b-form-input</span>\n                  <span class=hljs-attr>v-model</span>=<span class=hljs-string>"search"</span>\n                  <span class=hljs-attr>id</span>=<span class=hljs-string>"tag-search-input"</span>\n                  <span class=hljs-attr>type</span>=<span class=hljs-string>"search"</span>\n                  <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span>\n                  <span class=hljs-attr>autocomplete</span>=<span class=hljs-string>"off"</span>\n                 &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-input</span>&gt;</span>\n              <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n            <span class=hljs-tag>&lt;/<span class=hljs-name>b-dropdown-form</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-dropdown-divider</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-dropdown-divider</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-dropdown-item-button</span>\n              <span class=hljs-attr>v-for</span>=<span class=hljs-string>"option in availableOptions"</span>\n              <span class=hljs-attr>:key</span>=<span class=hljs-string>"option"</span>\n              @<span class=hljs-attr>click</span>=<span class=hljs-string>"onOptionClick({ option, addTag })"</span>\n            &gt;</span>\n              {{ option }}\n            <span class=hljs-tag>&lt;/<span class=hljs-name>b-dropdown-item-button</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-dropdown-text</span> <span class=hljs-attr>v-if</span>=<span class=hljs-string>"availableOptions.length === 0"</span>&gt;</span>\n              There are no tags available to select\n            <span class=hljs-tag>&lt;/<span class=hljs-name>b-dropdown-text</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-dropdown</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>options</span>: [<span class=hljs-string>\'Apple\'</span>, <span class=hljs-string>\'Orange\'</span>, <span class=hljs-string>\'Banana\'</span>, <span class=hljs-string>\'Lime\'</span>, <span class=hljs-string>\'Peach\'</span>, <span class=hljs-string>\'Chocolate\'</span>, <span class=hljs-string>\'Strawberry\'</span>],\n        <span class=hljs-attr>search</span>: <span class=hljs-string>\'\'</span>,\n        <span class=hljs-attr>value</span>: []\n      }\n    },\n    <span class=hljs-attr>computed</span>: {\n      criteria() {\n        <span class=hljs-comment>// Compute the search criteria</span>\n        <span class=hljs-keyword>return</span> <span class=hljs-keyword>this</span>.search.trim().toLowerCase()\n      },\n      availableOptions() {\n        <span class=hljs-keyword>const</span> criteria = <span class=hljs-keyword>this</span>.criteria\n        <span class=hljs-comment>// Filter out already selected options</span>\n        <span class=hljs-keyword>const</span> options = <span class=hljs-keyword>this</span>.options.filter(<span class=hljs-function><span class=hljs-params>opt</span> =&gt;</span> <span class=hljs-keyword>this</span>.value.indexOf(opt) === <span class=hljs-number>-1</span>)\n        <span class=hljs-keyword>if</span> (criteria) {\n          <span class=hljs-comment>// Show only options that match criteria</span>\n          <span class=hljs-keyword>return</span> options.filter(<span class=hljs-function><span class=hljs-params>opt</span> =&gt;</span> opt.toLowerCase().indexOf(criteria) &gt; <span class=hljs-number>-1</span>);\n        }\n        <span class=hljs-comment>// Show all options available</span>\n        <span class=hljs-keyword>return</span> options\n      },\n      searchDesc() {\n        <span class=hljs-keyword>if</span> (<span class=hljs-keyword>this</span>.criteria &amp;&amp; <span class=hljs-keyword>this</span>.availableOptions.length === <span class=hljs-number>0</span>) {\n          <span class=hljs-keyword>return</span> <span class=hljs-string>\'There are no tags matching your search criteria\'</span>\n        }\n        <span class=hljs-keyword>return</span> <span class=hljs-string>\'\'</span>\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      onOptionClick({ option, addTag }) {\n        addTag(option)\n        <span class=hljs-keyword>this</span>.search = <span class=hljs-string>\'\'</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-form-tags-dropdown-example.vue --&gt;</span></pre></div><h3 id=creating-wrapper-components class=bv-no-focus-ring><span class=bd-content-title>Creating wrapper components<a class=anchorjs-link href=#creating-wrapper-components aria-labelledby=creating-wrapper-components></a></span></h3> <p>You can easily create a custom wrapper component with your preferred rendering style as follows:</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-form-tags</span> <span class=hljs-attr>:value</span>=<span class=hljs-string>"value"</span> @<span class=hljs-attr>input</span>=<span class=hljs-string>"$emit(\'input\', $event)"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot</span>=<span class=hljs-string>"{ tags, addTag, removeTag, inputAttrs, inputHandlers }"</span>&gt;</span>\n     <span class=hljs-comment>&lt;!-- Place your custom rendering here --&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-tags</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span>\n  import { BFormTags } from \'bootstrap-vue\'\n\n  export default {\n    name: \'MyCustomTags",\n    components: { BFormTags },\n    model: {\n      prop: \'value\',\n      event: \'input\'\n    },\n    props: {\n      value: {\n        type: Array,\n        default: () =&gt; []\n      }\n    }\n  }\n<span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span></pre></div><h2 id=b-form-tag-helper-component class=bv-no-focus-ring><span class=bd-content-title><code class=text-nowrap translate=no>&lt;b-form-tag&gt;</code> helper component<a class=anchorjs-link href=#b-form-tag-helper-component aria-labelledby=b-form-tag-helper-component></a></span></h2> <p>BootstrapVue provides the helper component <code class=text-nowrap translate=no>&lt;b-form-tag&gt;</code>, for use with the default scoped slot of <code class=text-nowrap translate=no>&lt;b-form-tags&gt;</code>. The component is based upon <a href=/docs/components/badge class=font-weight-bold><code class=text-nowrap translate=no>&lt;b-badge&gt;</code></a> and <a href=/docs/components/button/#comp-ref-b-button-close class=font-weight-bold><code class=text-nowrap translate=no>&lt;b-button-close&gt;</code></a>.</p> <p><code class=text-nowrap translate=no>&lt;b-form-tag&gt;</code> supports the same variants as <code class=text-nowrap translate=no>&lt;b-badge&gt;</code> and also supports <code class=text-nowrap translate=no>pill</code> styling. Sizing is based on the containing element&#39;s font-size.</p> <p>The <code class=text-nowrap translate=no>remove</code> event is emitted when the <code class=text-nowrap translate=no>&lt;b-form-tag&gt;</code> remove button is clicked.</p> <p>Tags that are too wide for their parent container will automatically have their text content truncated with an ellipsis. For this reason, it is always good practice to supply a title via the <code class=text-nowrap translate=no>title</code> prop when using the default slot of <code class=text-nowrap translate=no>&lt;b-form-tag&gt;</code> for the tag content.</p> <p>Note <code class=text-nowrap translate=no>&lt;b-form-tag&gt;</code> requires BootstrapVue&#39;s custom CSS/SCSS for proper styling.</p> '}}]);