(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{430:function(n,t){n.exports='<h1 id=modals class=bv-no-focus-ring><span class=bd-content-title>Modals</span></h1> <p class=bd-lead>Modals are streamlined, but flexible dialog prompts powered by JavaScript and CSS. They support a number of use cases from user notification to completely custom content and feature a handful of helpful sub-components, sizes, variants, accessibility, and more.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-1</span>&gt;</span>Launch demo modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-1"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"BootstrapVue"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-4"</span>&gt;</span>Hello from modal!<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal.vue --&gt;</span></pre></div><h2 id=overview class=bv-no-focus-ring><span class=bd-content-title>Overview<a class=anchorjs-link href=#overview aria-labelledby=overview></a></span></h2> <p><code class=text-nowrap translate=no>&lt;b-modal&gt;</code>, by default, has an <strong>OK</strong> and <strong>Cancel</strong> buttons in the footer. These buttons can be customized by setting various props on the component. You can customize the size of the buttons, disable buttons, hide the <strong>Cancel</strong> button (i.e. <code class=text-nowrap translate=no>ok-only</code>), choose a variant (e.g. <code class=text-nowrap translate=no>danger</code> for a red OK button) using the <code class=text-nowrap translate=no>ok-variant</code> and <code class=text-nowrap translate=no>cancel-variant</code> props, and provide custom button content using the <code class=text-nowrap translate=no>ok-title</code> and <code class=text-nowrap translate=no>cancel-title</code> props, or using the named slots <code class=text-nowrap translate=no>modal-ok</code> and <code class=text-nowrap translate=no>modal-cancel</code>.</p> <p><code class=text-nowrap translate=no>&lt;b-modal&gt;</code> supports close on ESC (enabled by default), close on backdrop click (enabled by default), and the <code class=text-nowrap translate=no>X</code> close button in the header (enabled by default). These features may be disabled by setting the props <code class=text-nowrap translate=no>no-close-on-esc</code>, <code class=text-nowrap translate=no>no-close-on-backdrop</code>, and <code class=text-nowrap translate=no>hide-header-close</code> respectively.</p> <p>You can override the modal title via the named slot <code class=text-nowrap translate=no>modal-title</code>, override the header completely via the <code class=text-nowrap translate=no>modal-header</code> slot, and override the footer completely via the <code class=text-nowrap translate=no>modal-footer</code> slot.</p> <p><strong>Note</strong>: when using the <code class=text-nowrap translate=no>modal-footer</code> slot, the default <strong>OK</strong> and <strong>Cancel</strong> buttons will not be present. Also, if you use the <code class=text-nowrap translate=no>modal-header</code> slot, the default header <code class=text-nowrap translate=no>X</code> close button will not be present, nor can you use the <code class=text-nowrap translate=no>modal-title</code> slot.</p> <p>Modals will not render their content in the document until they are shown (lazily rendered). Modals, when visible, are rendered <strong>appended to the <code class=text-nowrap translate=no>&lt;body&gt;</code> element</strong>. The placement of the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> component will not affect layout, as it always renders as a placeholder comment node (<code class=text-nowrap translate=no>&lt;!----&gt;</code>). You can revert to the behaviour of older BootstrapVue versions via the use of the <a href=#lazy-loading-and-static-modals class=font-weight-bold><code class=text-nowrap translate=no>static</code> prop</a>.</p> <h2 id=toggle-modal-visibility class=bv-no-focus-ring><span class=bd-content-title>Toggle modal visibility<a class=anchorjs-link href=#toggle-modal-visibility aria-labelledby=toggle-modal-visibility></a></span></h2> <p>There are several methods that you can employ to toggle the visibility of <code class=text-nowrap translate=no>&lt;b-modal&gt;</code>.</p> <h3 id=using-v-b-modal-directive class=bv-no-focus-ring><span class=bd-content-title>Using <code class=text-nowrap translate=no>v-b-modal</code> directive<a class=anchorjs-link href=#using-v-b-modal-directive aria-labelledby=using-v-b-modal-directive></a></span></h3> <p>Other elements can easily show modals using the <code class=text-nowrap translate=no>v-b-modal</code> directive.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-comment>&lt;!-- Using modifiers --&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.my-modal</span>&gt;</span>Show Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-comment>&lt;!-- Using value --&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal</span>=<span class=hljs-string>"\'my-modal\'"</span>&gt;</span>Show Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-comment>&lt;!-- The modal --&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"my-modal"</span>&gt;</span>Hello From My Modal!<span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-directive.vue --&gt;</span></pre></div><p>This approach will automatically return focus to the trigger element once the modal closes (similar to default Bootstrap functionality). Other approaches for toggling modal visibility may require additional code to implement this accessibility feature.</p> <p>See the <a href=#accessibility class=font-weight-bold>Accessibility</a> section below for details.</p> <h3 id=using-thisbvmodalshow-and-thisbvmodalhide-instance-methods class=bv-no-focus-ring><span class=bd-content-title>Using <code class=text-nowrap translate=no>this.$bvModal.show()</code> and <code class=text-nowrap translate=no>this.$bvModal.hide()</code> instance methods<a class=anchorjs-link href=#using-thisbvmodalshow-and-thisbvmodalhide-instance-methods aria-labelledby=using-thisbvmodalshow-and-thisbvmodalhide-instance-methods></a></span></h3> <p>When BootstrapVue is installed as a plugin, or the <code class=text-nowrap translate=no>ModalPlugin</code> plugin is used, BootstrapVue will inject a <code class=text-nowrap translate=no>$bvModal</code> object into every Vue instance (components, apps). <code class=text-nowrap translate=no>this.$bvModal</code> exposes several methods, of which two are for showing and hiding modals:</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Method</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>this.$bvModal.show(id)</code></td> <td>Show the modal with the specified <code class=text-nowrap translate=no>id</code></td> </tr> <tr> <td><code class=text-nowrap translate=no>this.$bvModal.hide(id)</code></td> <td>Hide the modal with the specified <code class=text-nowrap translate=no>id</code></td> </tr> </tbody></table> </div><p>Both methods return immediately after being called.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"show-btn"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"$bvModal.show(\'bv-modal-example\')"</span>&gt;</span>Open Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"bv-modal-example"</span> <span class=hljs-attr>hide-footer</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:modal-title</span>&gt;</span>\n      Using <span class=hljs-tag>&lt;<span class=hljs-name>code</span>&gt;</span>$bvModal<span class=hljs-tag>&lt;/<span class=hljs-name>code</span>&gt;</span> Methods\n    <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"d-block text-center"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>h3</span>&gt;</span>Hello From This Modal!<span class=hljs-tag>&lt;/<span class=hljs-name>h3</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-3"</span> <span class=hljs-attr>block</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"$bvModal.hide(\'bv-modal-example\')"</span>&gt;</span>Close Me<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-bv-modal-hide-show.vue --&gt;</span></pre></div><p>The <code class=text-nowrap translate=no>this.$bvModal</code> object is also used for displaying <a href=#modal-message-boxes class=font-weight-bold>modal message boxes</a>.</p> <h3 id=using-show-hide-and-toggle-component-methods class=bv-no-focus-ring><span class=bd-content-title>Using <code class=text-nowrap translate=no>show()</code>, <code class=text-nowrap translate=no>hide()</code>, and <code class=text-nowrap translate=no>toggle()</code> component methods<a class=anchorjs-link href=#using-show-hide-and-toggle-component-methods aria-labelledby=using-show-hide-and-toggle-component-methods></a></span></h3> <p>You can access modal using <code class=text-nowrap translate=no>ref</code> attribute and then call the <code class=text-nowrap translate=no>show()</code>, <code class=text-nowrap translate=no>hide()</code> or <code class=text-nowrap translate=no>toggle()</code> methods.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"show-btn"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"showModal"</span>&gt;</span>Open Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"toggle-btn"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"toggleModal"</span>&gt;</span>Toggle Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>ref</span>=<span class=hljs-string>"my-modal"</span> <span class=hljs-attr>hide-footer</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Using Component Methods"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"d-block text-center"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>h3</span>&gt;</span>Hello From My Modal!<span class=hljs-tag>&lt;/<span class=hljs-name>h3</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-3"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"outline-danger"</span> <span class=hljs-attr>block</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"hideModal"</span>&gt;</span>Close Me<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-2"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"outline-warning"</span> <span class=hljs-attr>block</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"toggleModal"</span>&gt;</span>Toggle Me<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    <span class=hljs-attr>methods</span>: {\n      showModal() {\n        <span class=hljs-keyword>this</span>.$refs[<span class=hljs-string>\'my-modal\'</span>].show()\n      },\n      hideModal() {\n        <span class=hljs-keyword>this</span>.$refs[<span class=hljs-string>\'my-modal\'</span>].hide()\n      },\n      toggleModal() {\n        <span class=hljs-comment>// We pass the ID of the button that we want to return focus to</span>\n        <span class=hljs-comment>// when the modal has hidden</span>\n        <span class=hljs-keyword>this</span>.$refs[<span class=hljs-string>\'my-modal\'</span>].toggle(<span class=hljs-string>\'#toggle-btn\'</span>)\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-methods.vue --&gt;</span></pre></div><p>The <code class=text-nowrap translate=no>hide()</code> method accepts an optional string <code class=text-nowrap translate=no>trigger</code> argument for defining what triggered the modal to close. See section <a href=#prevent-closing class=font-weight-bold>Prevent Closing</a> below for details.</p> <p><strong>Note:</strong> It is recommended to use the <code class=text-nowrap translate=no>this.$bvModal.show()</code> and <code class=text-nowrap translate=no>this.$bvModal.hide()</code> methods (mentioned in the previous section) instead of using <code class=text-nowrap translate=no>$ref</code> methods.</p> <h3 id=using-v-model-property class=bv-no-focus-ring><span class=bd-content-title>Using <code class=text-nowrap translate=no>v-model</code> property<a class=anchorjs-link href=#using-v-model-property aria-labelledby=using-v-model-property></a></span></h3> <p><code class=text-nowrap translate=no>v-model</code> property is always automatically synced with <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> visible state and you can show/hide using <code class=text-nowrap translate=no>v-model</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"modalShow = !modalShow"</span>&gt;</span>Open Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>v-model</span>=<span class=hljs-string>"modalShow"</span>&gt;</span>Hello From Modal!<span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>modalShow</span>: <span class=hljs-literal>false</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-v-model.vue --&gt;</span></pre></div><p>When using the <code class=text-nowrap translate=no>v-model</code> prop, <strong>do not</strong> use the <code class=text-nowrap translate=no>visible</code> prop at the same time.</p> <h3 id=using-scoped-slot-scope-methods class=bv-no-focus-ring><span class=bd-content-title>Using scoped slot scope methods<a class=anchorjs-link href=#using-scoped-slot-scope-methods aria-labelledby=using-scoped-slot-scope-methods></a></span></h3> <p>Refer to the <a href=#custom-rendering-with-slots class=font-weight-bold>Custom rendering with slots</a> section on using the various methods passed to scoped slots for closing modals.</p> <h3 id=emitting-events-on-root class=bv-no-focus-ring><span class=bd-content-title>Emitting events on $root<a class=anchorjs-link href=#emitting-events-on-root aria-labelledby=emitting-events-on-root></a></span></h3> <p>You can emit <code class=text-nowrap translate=no>bv::show::modal</code>, <code class=text-nowrap translate=no>bv::hide::modal</code>, and <code class=text-nowrap translate=no>bv::toggle::modal</code> events on <code class=text-nowrap translate=no>$root</code> with the first argument set to the modal&#39;s id. An optional second argument can specify the element to return focus to once the modal is closed. The second argument can be a CSS selector, an element reference, or a component reference (the root element of the component will be focused).</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"showModal"</span> <span class=hljs-attr>ref</span>=<span class=hljs-string>"btnShow"</span>&gt;</span>Open Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"toggleModal"</span> <span class=hljs-attr>ref</span>=<span class=hljs-string>"btnToggle"</span>&gt;</span>Toggle Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-1"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"d-block"</span>&gt;</span>Hello From My Modal!<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"hideModal"</span>&gt;</span>Close Me<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"toggleModal"</span>&gt;</span>Toggle Me<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span></pre></div><div class=bd-code><pre class="hljs js p-2" translate=no><span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  <span class=hljs-attr>methods</span>: {\n    showModal() {\n      <span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>\'bv::show::modal\'</span>, <span class=hljs-string>\'modal-1\'</span>, <span class=hljs-string>\'#btnShow\'</span>)\n    },\n    hideModal() {\n      <span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>\'bv::hide::modal\'</span>, <span class=hljs-string>\'modal-1\'</span>, <span class=hljs-string>\'#btnShow\'</span>)\n    },\n    toggleModal() {\n      <span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>\'bv::toggle::modal\'</span>, <span class=hljs-string>\'modal-1\'</span>, <span class=hljs-string>\'#btnToggle\'</span>)\n    }\n  }\n}</pre></div><p><strong>Note:</strong> It is recommended to use the <code class=text-nowrap translate=no>this.$bvModal.show()</code> and <code class=text-nowrap translate=no>this.$bvModal.hide()</code> methods (mentioned in a previous section) instead of emitting <code class=text-nowrap translate=no>$root</code> events.</p> <h3 id=prevent-closing class=bv-no-focus-ring><span class=bd-content-title>Prevent closing<a class=anchorjs-link href=#prevent-closing aria-labelledby=prevent-closing></a></span></h3> <p>To prevent <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> from closing (for example when validation fails). you can call the <code class=text-nowrap translate=no>.preventDefault()</code> method of the event object passed to your <code class=text-nowrap translate=no>ok</code> (<strong>OK</strong> button), <code class=text-nowrap translate=no>cancel</code> (<strong>Cancel</strong> button), <code class=text-nowrap translate=no>close</code> (modal header close button) and <code class=text-nowrap translate=no>hide</code> event handlers. Note that <code class=text-nowrap translate=no>.preventDefault()</code>, when used, <strong>must</strong> be called synchronously, as async is not supported.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-prevent-closing</span>&gt;</span>Open Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mt-3"</span>&gt;</span>\n      Submitted Names:\n      <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>v-if</span>=<span class=hljs-string>"submittedNames.length === 0"</span>&gt;</span>--<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>v-else</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-0 pl-3"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>"name in submittedNames"</span>&gt;</span>{{ name }}<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span>\n      <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-prevent-closing"</span>\n      <span class=hljs-attr>ref</span>=<span class=hljs-string>"modal"</span>\n      <span class=hljs-attr>title</span>=<span class=hljs-string>"Submit Your Name"</span>\n      @<span class=hljs-attr>show</span>=<span class=hljs-string>"resetModal"</span>\n      @<span class=hljs-attr>hidden</span>=<span class=hljs-string>"resetModal"</span>\n      @<span class=hljs-attr>ok</span>=<span class=hljs-string>"handleOk"</span>\n    &gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>form</span> <span class=hljs-attr>ref</span>=<span class=hljs-string>"form"</span> @<span class=hljs-attr>submit.stop.prevent</span>=<span class=hljs-string>"handleSubmit"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-form-group</span>\n          <span class=hljs-attr>:state</span>=<span class=hljs-string>"nameState"</span>\n          <span class=hljs-attr>label</span>=<span class=hljs-string>"Name"</span>\n          <span class=hljs-attr>label-for</span>=<span class=hljs-string>"name-input"</span>\n          <span class=hljs-attr>invalid-feedback</span>=<span class=hljs-string>"Name is required"</span>\n        &gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-form-input</span>\n            <span class=hljs-attr>id</span>=<span class=hljs-string>"name-input"</span>\n            <span class=hljs-attr>v-model</span>=<span class=hljs-string>"name"</span>\n            <span class=hljs-attr>:state</span>=<span class=hljs-string>"nameState"</span>\n            <span class=hljs-attr>required</span>\n          &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-input</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-form-group</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>form</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>name</span>: <span class=hljs-string>\'\'</span>,\n        <span class=hljs-attr>nameState</span>: <span class=hljs-literal>null</span>,\n        <span class=hljs-attr>submittedNames</span>: []\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      checkFormValidity() {\n        <span class=hljs-keyword>const</span> valid = <span class=hljs-keyword>this</span>.$refs.form.checkValidity()\n        <span class=hljs-keyword>this</span>.nameState = valid\n        <span class=hljs-keyword>return</span> valid\n      },\n      resetModal() {\n        <span class=hljs-keyword>this</span>.name = <span class=hljs-string>\'\'</span>\n        <span class=hljs-keyword>this</span>.nameState = <span class=hljs-literal>null</span>\n      },\n      handleOk(bvModalEvt) {\n        <span class=hljs-comment>// Prevent modal from closing</span>\n        bvModalEvt.preventDefault()\n        <span class=hljs-comment>// Trigger submit handler</span>\n        <span class=hljs-keyword>this</span>.handleSubmit()\n      },\n      handleSubmit() {\n        <span class=hljs-comment>// Exit when the form isn\'t valid</span>\n        <span class=hljs-keyword>if</span> (!<span class=hljs-keyword>this</span>.checkFormValidity()) {\n          <span class=hljs-keyword>return</span>\n        }\n        <span class=hljs-comment>// Push the name to submitted names</span>\n        <span class=hljs-keyword>this</span>.submittedNames.push(<span class=hljs-keyword>this</span>.name)\n        <span class=hljs-comment>// Hide the modal manually</span>\n        <span class=hljs-keyword>this</span>.$nextTick(<span class=hljs-function><span class=hljs-params>()</span> =&gt;</span> {\n          <span class=hljs-keyword>this</span>.$bvModal.hide(<span class=hljs-string>\'modal-prevent-closing\'</span>)\n        })\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-prevent-closing.vue --&gt;</span></pre></div><p><strong>Note</strong>: events <code class=text-nowrap translate=no>ok</code>, <code class=text-nowrap translate=no>cancel</code>, and <code class=text-nowrap translate=no>close</code> are emitted by modal&#39;s built in <strong>OK</strong>, <strong>Cancel</strong>, and header close (<strong>X</strong>) buttons respectively. These events will not be emitted, by default, if you have provided your own buttons in the <code class=text-nowrap translate=no>modal-footer</code> slot or have hidden the footer. In this case use the <code class=text-nowrap translate=no>hide</code> event to control cancelling of the modal close. Event <code class=text-nowrap translate=no>hide</code> is always emitted, even if <code class=text-nowrap translate=no>ok</code>, <code class=text-nowrap translate=no>cancel</code>, and <code class=text-nowrap translate=no>close</code> are emitted.</p> <p>The <code class=text-nowrap translate=no>ok</code>, <code class=text-nowrap translate=no>cancel</code>, <code class=text-nowrap translate=no>close</code> and <code class=text-nowrap translate=no>hide</code> event object (<code class=text-nowrap translate=no>BvModalEvent</code>) contains several properties and methods:</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Property or Method</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>preventDefault()</code></td> <td>Method</td> <td>When called prevents the modal from closing</td> </tr> <tr> <td><code class=text-nowrap translate=no>trigger</code></td> <td>Property</td> <td>Will be one of: <code class=text-nowrap translate=no>ok</code> (Default <strong>OK</strong> Clicked), <code class=text-nowrap translate=no>cancel</code> (Default <strong>Cancel</strong> clicked), <code class=text-nowrap translate=no>esc</code> (if the <kbd class=notranslate translate=no>Esc</kbd> key was pressed), <code class=text-nowrap translate=no>backdrop</code> (if the backdrop was clicked), <code class=text-nowrap translate=no>headerclose</code> (if the header X button was clicked), the first argument provided to the <code class=text-nowrap translate=no>hide()</code> method, or <code class=text-nowrap translate=no>null</code> otherwise.</td> </tr> <tr> <td><code class=text-nowrap translate=no>target</code></td> <td>Property</td> <td>A reference to the modal element</td> </tr> <tr> <td><code class=text-nowrap translate=no>vueTarget</code></td> <td>property</td> <td>A reference to the modal&#39;s Vue VM instance</td> </tr> <tr> <td><code class=text-nowrap translate=no>componentId</code></td> <td>property</td> <td>The modal&#39;s ID</td> </tr> </tbody></table> </div><p>You can set the value of <code class=text-nowrap translate=no>trigger</code> by passing an argument to the component&#39;s <code class=text-nowrap translate=no>hide()</code> method for advanced control (i.e. detecting what button or action triggered the modal to hide).</p> <p><strong>Note:</strong> <code class=text-nowrap translate=no>ok</code>, <code class=text-nowrap translate=no>cancel</code>, or <code class=text-nowrap translate=no>close</code> events will be only emitted when the argument to <code class=text-nowrap translate=no>hide()</code> is strictly <code class=text-nowrap translate=no>&#39;ok&#39;</code>, <code class=text-nowrap translate=no>&#39;cancel&#39;</code>, or <code class=text-nowrap translate=no>&#39;headerclose&#39;</code> respectively. The argument passed to <code class=text-nowrap translate=no>hide()</code> will be placed into the <code class=text-nowrap translate=no>trigger</code> property of the event object.</p> <h2 id=modal-content class=bv-no-focus-ring><span class=bd-content-title>Modal content<a class=anchorjs-link href=#modal-content aria-labelledby=modal-content></a></span></h2> <h3 id=using-the-grid class=bv-no-focus-ring><span class=bd-content-title>Using the grid<a class=anchorjs-link href=#using-the-grid aria-labelledby=using-the-grid></a></span></h3> <p>Utilize the Bootstrap grid system within a modal by nesting <code class=text-nowrap translate=no>&lt;b-container fluid&gt;</code> within the modal-body. Then, use the normal grid system <code class=text-nowrap translate=no>&lt;b-row&gt;</code> (or <code class=text-nowrap translate=no>&lt;b-form-row&gt;</code>) and <code class=text-nowrap translate=no>&lt;b-col&gt;</code> as you would anywhere else.</p> <h3 id=tooltips-and-popovers class=bv-no-focus-ring><span class=bd-content-title>Tooltips and popovers<a class=anchorjs-link href=#tooltips-and-popovers aria-labelledby=tooltips-and-popovers></a></span></h3> <p>Tooltips and popovers can be placed within modals as needed. When modals are closed, any tooltips and popovers within are also automatically dismissed. Tooltips and popovers are automatically appended to the modal element (to ensure correct z-indexing), although you can override where they are appended by specifying a container ID (refer to tooltip and popover docs for details).</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modalPopover</span>&gt;</span>Show Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modalPopover"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Modal with Popover"</span> <span class=hljs-attr>ok-only</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>\n      This\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-popover</span>=<span class=hljs-string>"\'Popover inside a modal!\'"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Popover"</span>&gt;</span>Button<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n      triggers a popover on click.\n    <span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>\n      This <span class=hljs-tag>&lt;<span class=hljs-name>a</span> <span class=hljs-attr>href</span>=<span class=hljs-string>"#"</span> <span class=hljs-attr>v-b-tooltip</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Tooltip in a modal!"</span>&gt;</span>Link<span class=hljs-tag>&lt;/<span class=hljs-name>a</span>&gt;</span> will show a tooltip on\n      hover.\n    <span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-popover.vue --&gt;</span></pre></div><h2 id=lazy-loading-and-static-modals class=bv-no-focus-ring><span class=bd-content-title>Lazy loading and static modals<a class=anchorjs-link href=#lazy-loading-and-static-modals aria-labelledby=lazy-loading-and-static-modals></a></span></h2> <p>By default, modals will not render their content in the document until they are shown (lazily rendered). Modals that, when visible, are rendered appended to the <code class=text-nowrap translate=no>&lt;body&gt;</code> element. The <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> component will not affect layout, as they render as a placeholder comment node (<code class=text-nowrap translate=no>&lt;!----&gt;</code>) in the DOM position they are placed. Due to the portalling process, it can take two or more <code class=text-nowrap translate=no>$nextTick</code>s to render changes of the content into the target.</p> <p>Modals can be rendered <em>in-place</em> in the document (i.e. where the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> component is placed in the document) by setting the <code class=text-nowrap translate=no>static</code> prop to <code class=text-nowrap translate=no>true</code>. Note that the content of the modal will be rendered in the DOM even if the modal is not visible/shown when <code class=text-nowrap translate=no>static</code> is <code class=text-nowrap translate=no>true</code>. To make <code class=text-nowrap translate=no>static</code> modals lazy rendered, also set the <code class=text-nowrap translate=no>lazy</code> prop to <code class=text-nowrap translate=no>true</code>. The modal will then appear in the document <em>only</em> when it is visible. Note, when in <code class=text-nowrap translate=no>static</code> mode, placement of the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> component <em>may affect layout</em> of your document and the modal.</p> <p>The <code class=text-nowrap translate=no>lazy</code> prop will have no effect if the prop <code class=text-nowrap translate=no>static</code> is not <code class=text-nowrap translate=no>true</code> (non-static modals will <em>always</em> be lazily rendered).</p> <h2 id=styling-options-and-customization class=bv-no-focus-ring><span class=bd-content-title>Styling, options, and customization<a class=anchorjs-link href=#styling-options-and-customization aria-labelledby=styling-options-and-customization></a></span></h2> <h3 id=modal-sizing class=bv-no-focus-ring><span class=bd-content-title>Modal sizing<a class=anchorjs-link href=#modal-sizing aria-labelledby=modal-sizing></a></span></h3> <p>Modals have three optional sizes, available via the prop <code class=text-nowrap translate=no>size</code>. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports. Valid optional sizes are <code class=text-nowrap translate=no>sm</code>, <code class=text-nowrap translate=no>lg</code>, and <code class=text-nowrap translate=no>xl</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-xl</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"primary"</span>&gt;</span>xl modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-lg</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"primary"</span>&gt;</span>lg modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-sm</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"primary"</span>&gt;</span>sm modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-xl"</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"xl"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Extra Large Modal"</span>&gt;</span>Hello Extra Large Modal!<span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-lg"</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"lg"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Large Modal"</span>&gt;</span>Hello Large Modal!<span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-sm"</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Small Modal"</span>&gt;</span>Hello Small Modal!<span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-sizes.vue --&gt;</span></pre></div><p>The <code class=text-nowrap translate=no>size</code> prop maps the size to the <code class=text-nowrap translate=no>.modal-&lt;size&gt;</code> classes.</p> <h3 id=scrolling-long-content class=bv-no-focus-ring><span class=bd-content-title>Scrolling long content<a class=anchorjs-link href=#scrolling-long-content aria-labelledby=scrolling-long-content></a></span></h3> <p>When modals become too long for the user&#39;s viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-tall</span>&gt;</span>Launch overflowing modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-tall"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Overflowing Content"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-4"</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>"i in 20"</span> <span class=hljs-attr>:key</span>=<span class=hljs-string>"i"</span>&gt;</span>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\n      in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n    <span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-scroll-overflow.vue --&gt;</span></pre></div><p>You can also create a scrollable modal that allows the scrolling of the modal body by setting the prop <code class=text-nowrap translate=no>scrollable</code> to <code class=text-nowrap translate=no>true</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-scrollable</span>&gt;</span>Launch scrolling modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-scrollable"</span> <span class=hljs-attr>scrollable</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Scrollable Content"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-4"</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>"i in 20"</span> <span class=hljs-attr>:key</span>=<span class=hljs-string>"i"</span>&gt;</span>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\n      in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n    <span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-scrollable-content.vue --&gt;</span></pre></div><h3 id=vertically-centered-modal class=bv-no-focus-ring><span class=bd-content-title>Vertically centered modal<a class=anchorjs-link href=#vertically-centered-modal aria-labelledby=vertically-centered-modal></a></span></h3> <p>Vertically center your modal in the viewport by setting the <code class=text-nowrap translate=no>centered</code> prop.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-center</span>&gt;</span>Launch centered modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-center"</span> <span class=hljs-attr>centered</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"BootstrapVue"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-4"</span>&gt;</span>Vertically centered modal!<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-center-vertically.vue --&gt;</span></pre></div><p>Feel free to mix vertically <code class=text-nowrap translate=no>centered</code> with <code class=text-nowrap translate=no>scrollable</code>.</p> <h3 id=variants class=bv-no-focus-ring><span class=bd-content-title>Variants<a class=anchorjs-link href=#variants aria-labelledby=variants></a></span></h3> <p>Control the header, footer, and body background and text variants by setting the <code class=text-nowrap translate=no>header-bg-variant</code>, <code class=text-nowrap translate=no>header-text-variant</code>, <code class=text-nowrap translate=no>body-bg-variant</code>, <code class=text-nowrap translate=no>body-text-variant</code>, <code class=text-nowrap translate=no>footer-bg-variant</code>, and <code class=text-nowrap translate=no>footer-text-variant</code> props. Use any of the standard Bootstrap variants such as <code class=text-nowrap translate=no>danger</code>, <code class=text-nowrap translate=no>warning</code>, <code class=text-nowrap translate=no>info</code>, <code class=text-nowrap translate=no>success</code>, <code class=text-nowrap translate=no>dark</code>, <code class=text-nowrap translate=no>light</code>, etc.</p> <p>The variants for the bottom border of the header and top border of the footer can be controlled by the <code class=text-nowrap translate=no>header-border-variant</code> and <code class=text-nowrap translate=no>footer-border-variant</code> props respectively.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"show=true"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"primary"</span>&gt;</span>Show Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span>\n      <span class=hljs-attr>v-model</span>=<span class=hljs-string>"show"</span>\n      <span class=hljs-attr>title</span>=<span class=hljs-string>"Modal Variants"</span>\n      <span class=hljs-attr>:header-bg-variant</span>=<span class=hljs-string>"headerBgVariant"</span>\n      <span class=hljs-attr>:header-text-variant</span>=<span class=hljs-string>"headerTextVariant"</span>\n      <span class=hljs-attr>:body-bg-variant</span>=<span class=hljs-string>"bodyBgVariant"</span>\n      <span class=hljs-attr>:body-text-variant</span>=<span class=hljs-string>"bodyTextVariant"</span>\n      <span class=hljs-attr>:footer-bg-variant</span>=<span class=hljs-string>"footerBgVariant"</span>\n      <span class=hljs-attr>:footer-text-variant</span>=<span class=hljs-string>"footerTextVariant"</span>\n    &gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-container</span> <span class=hljs-attr>fluid</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-row</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-1 text-center"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span> <span class=hljs-attr>cols</span>=<span class=hljs-string>"3"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span>&gt;</span>Background<span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span>&gt;</span>Text<span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-row</span>&gt;</span>\n\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-row</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-1"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span> <span class=hljs-attr>cols</span>=<span class=hljs-string>"3"</span>&gt;</span>Header<span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-form-select</span>\n              <span class=hljs-attr>v-model</span>=<span class=hljs-string>"headerBgVariant"</span>\n              <span class=hljs-attr>:options</span>=<span class=hljs-string>"variants"</span>\n            &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-select</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-form-select</span>\n              <span class=hljs-attr>v-model</span>=<span class=hljs-string>"headerTextVariant"</span>\n              <span class=hljs-attr>:options</span>=<span class=hljs-string>"variants"</span>\n            &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-select</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-row</span>&gt;</span>\n\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-row</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-1"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span> <span class=hljs-attr>cols</span>=<span class=hljs-string>"3"</span>&gt;</span>Body<span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-form-select</span>\n              <span class=hljs-attr>v-model</span>=<span class=hljs-string>"bodyBgVariant"</span>\n              <span class=hljs-attr>:options</span>=<span class=hljs-string>"variants"</span>\n            &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-select</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-form-select</span>\n              <span class=hljs-attr>v-model</span>=<span class=hljs-string>"bodyTextVariant"</span>\n              <span class=hljs-attr>:options</span>=<span class=hljs-string>"variants"</span>\n            &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-select</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-row</span>&gt;</span>\n\n        <span class=hljs-tag>&lt;<span class=hljs-name>b-row</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span> <span class=hljs-attr>cols</span>=<span class=hljs-string>"3"</span>&gt;</span>Footer<span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-form-select</span>\n              <span class=hljs-attr>v-model</span>=<span class=hljs-string>"footerBgVariant"</span>\n              <span class=hljs-attr>:options</span>=<span class=hljs-string>"variants"</span>\n            &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-select</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>b-form-select</span>\n              <span class=hljs-attr>v-model</span>=<span class=hljs-string>"footerTextVariant"</span>\n              <span class=hljs-attr>:options</span>=<span class=hljs-string>"variants"</span>\n            &gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-select</span>&gt;</span>\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>b-row</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-container</span>&gt;</span>\n\n      <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:modal-footer</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"w-100"</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"float-left"</span>&gt;</span>Modal Footer Content<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span>\n            <span class=hljs-attr>variant</span>=<span class=hljs-string>"primary"</span>\n            <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span>\n            <span class=hljs-attr>class</span>=<span class=hljs-string>"float-right"</span>\n            @<span class=hljs-attr>click</span>=<span class=hljs-string>"show=false"</span>\n          &gt;</span>\n            Close\n          <span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>show</span>: <span class=hljs-literal>false</span>,\n        <span class=hljs-attr>variants</span>: [<span class=hljs-string>\'primary\'</span>, <span class=hljs-string>\'secondary\'</span>, <span class=hljs-string>\'success\'</span>, <span class=hljs-string>\'warning\'</span>, <span class=hljs-string>\'danger\'</span>, <span class=hljs-string>\'info\'</span>, <span class=hljs-string>\'light\'</span>, <span class=hljs-string>\'dark\'</span>],\n        <span class=hljs-attr>headerBgVariant</span>: <span class=hljs-string>\'dark\'</span>,\n        <span class=hljs-attr>headerTextVariant</span>: <span class=hljs-string>\'light\'</span>,\n        <span class=hljs-attr>bodyBgVariant</span>: <span class=hljs-string>\'light\'</span>,\n        <span class=hljs-attr>bodyTextVariant</span>: <span class=hljs-string>\'dark\'</span>,\n        <span class=hljs-attr>footerBgVariant</span>: <span class=hljs-string>\'warning\'</span>,\n        <span class=hljs-attr>footerTextVariant</span>: <span class=hljs-string>\'dark\'</span>\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-variants.vue --&gt;</span></pre></div><p>You can also apply arbitrary classes to the modal dialog container, content (modal window itself), header, body and footer via the <code class=text-nowrap translate=no>modal-class</code>, <code class=text-nowrap translate=no>content-class</code>, <code class=text-nowrap translate=no>header-class</code>, <code class=text-nowrap translate=no>body-class</code> and <code class=text-nowrap translate=no>footer-class</code> props, respectively. The props accept either a string or array of strings.</p> <h3 id=hiding-the-backdrop class=bv-no-focus-ring><span class=bd-content-title>Hiding the backdrop<a class=anchorjs-link href=#hiding-the-backdrop aria-labelledby=hiding-the-backdrop></a></span></h3> <p>Hide the modal&#39;s backdrop via setting the <code class=text-nowrap translate=no>hide-backdrop</code> prop.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-no-backdrop</span>&gt;</span>Open modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-no-backdrop"</span> <span class=hljs-attr>hide-backdrop</span> <span class=hljs-attr>content-class</span>=<span class=hljs-string>"shadow"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"BootstrapVue"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-2"</span>&gt;</span>\n      We\'ve added the utility class <span class=hljs-tag>&lt;<span class=hljs-name>code</span>&gt;</span>\'shadow\'<span class=hljs-tag>&lt;/<span class=hljs-name>code</span>&gt;</span>\n      to the modal content for added effect.\n    <span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- modal-no-backdrop.vue --&gt;</span></pre></div><p>Note that clicking outside of the modal will still close the modal even though the backdrop is hidden. You can disable this behaviour by setting the <code class=text-nowrap translate=no>no-close-on-backdrop</code> prop on <code class=text-nowrap translate=no>&lt;b-modal&gt;</code>.</p> <h3 id=disable-open-and-close-animation class=bv-no-focus-ring><span class=bd-content-title>Disable open and close animation<a class=anchorjs-link href=#disable-open-and-close-animation aria-labelledby=disable-open-and-close-animation></a></span></h3> <p>To disable the fading transition/animation when modal opens and closes, just set the prop <code class=text-nowrap translate=no>no-fade</code> on the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> component.</p> <h3 id=footer-button-sizing class=bv-no-focus-ring><span class=bd-content-title>Footer button sizing<a class=anchorjs-link href=#footer-button-sizing aria-labelledby=footer-button-sizing></a></span></h3> <p>Fancy smaller or larger buttons in the default footer? Simply set the <code class=text-nowrap translate=no>button-size</code> prop to <code class=text-nowrap translate=no>&#39;sm&#39;</code> for small buttons, or <code class=text-nowrap translate=no>&#39;lg&#39;</code> for larger buttons.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-footer-sm</span>&gt;</span>Small Footer Buttons<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-footer-lg</span>&gt;</span>Large Footer Buttons<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-footer-sm"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"BootstrapVue"</span> <span class=hljs-attr>button-size</span>=<span class=hljs-string>"sm"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-2"</span>&gt;</span>This modal has small footer buttons<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-footer-lg"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"BootstrapVue"</span> <span class=hljs-attr>button-size</span>=<span class=hljs-string>"lg"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-2"</span>&gt;</span>This modal has large footer buttons<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- modal-footer-btn-sizes.vue --&gt;</span></pre></div><p>The prop <code class=text-nowrap translate=no>button-size</code> has no effect if you have provided your own footer via the <a href=#custom-rendering-with-slots class=font-weight-bold><code class=text-nowrap translate=no>modal-footer</code></a> slot.</p> <h3 id=disabling-built-in-footer-buttons class=bv-no-focus-ring><span class=bd-content-title>Disabling built-in footer buttons<a class=anchorjs-link href=#disabling-built-in-footer-buttons aria-labelledby=disabling-built-in-footer-buttons></a></span></h3> <p>You can disable the built-in footer buttons programmatically.</p> <p>You can disable the <strong>Cancel</strong> and <strong>OK</strong> buttons individually by setting the <code class=text-nowrap translate=no>cancel-disabled</code> and <code class=text-nowrap translate=no>ok-disabled</code> props, respectively, to <code class=text-nowrap translate=no>true</code>. Set the prop to <code class=text-nowrap translate=no>false</code> to re-enable the button.</p> <p>To disable both <strong>Cancel</strong> and <strong>OK</strong> buttons at the same time, simply set the <code class=text-nowrap translate=no>busy</code> prop to <code class=text-nowrap translate=no>true</code>. Set it to <code class=text-nowrap translate=no>false</code> to re-enable both buttons.</p> <h3 id=custom-rendering-with-slots class=bv-no-focus-ring><span class=bd-content-title>Custom rendering with slots<a class=anchorjs-link href=#custom-rendering-with-slots aria-labelledby=custom-rendering-with-slots></a></span></h3> <p><code class=text-nowrap translate=no>&lt;b-modal&gt;</code> provides several named slots (of which some are optionally scoped) that you can use to customize the content of various sections of the modal.</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Slot</th> <th>Optionally Scoped</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>default</code></td> <td>Yes</td> <td>Main content of the modal</td> </tr> <tr> <td><code class=text-nowrap translate=no>modal-title</code></td> <td>Yes</td> <td>Content to place in the modal&#39;s title</td> </tr> <tr> <td><code class=text-nowrap translate=no>modal-header</code></td> <td>Yes</td> <td>Content to place in the header. Replaces the entire header including the close button</td> </tr> <tr> <td><code class=text-nowrap translate=no>modal-footer</code></td> <td>Yes</td> <td>Content to place in the footer. Replaces the entire footer including the button(s)</td> </tr> <tr> <td><code class=text-nowrap translate=no>modal-ok</code></td> <td>No</td> <td>Content to place inside the footer OK button</td> </tr> <tr> <td><code class=text-nowrap translate=no>modal-cancel</code></td> <td>No</td> <td>Content to place inside the footer CANCEL button</td> </tr> <tr> <td><code class=text-nowrap translate=no>modal-header-close</code></td> <td>No</td> <td>Content to place inside the header CLOSE (<code class=text-nowrap translate=no>x</code>) button</td> </tr> </tbody></table> </div><p>The scope available to the slots that support optional scoping are:</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Method or Property</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>ok()</code></td> <td>Closes the modal and fires the <code class=text-nowrap translate=no>ok</code> and <code class=text-nowrap translate=no>hide</code> events, with <code class=text-nowrap translate=no>bvModalEvent.trigger = &#39;ok&#39;</code></td> </tr> <tr> <td><code class=text-nowrap translate=no>cancel()</code></td> <td>Closes the modal and fires the <code class=text-nowrap translate=no>cancel</code> and <code class=text-nowrap translate=no>hide</code> events, with <code class=text-nowrap translate=no>bvModalEvent.trigger = &#39;cancel&#39;</code></td> </tr> <tr> <td><code class=text-nowrap translate=no>close()</code></td> <td>Closes the modal and fires the <code class=text-nowrap translate=no>close</code> and <code class=text-nowrap translate=no>hide</code> events, with <code class=text-nowrap translate=no>bvModalEvent.trigger = &#39;headerclose&#39;</code></td> </tr> <tr> <td><code class=text-nowrap translate=no>hide(trigger)</code></td> <td>Closes the modal and fires the <code class=text-nowrap translate=no>hide</code> event, with the <code class=text-nowrap translate=no>bvModalEvent.trigger = trigger</code> (trigger is optional)</td> </tr> <tr> <td><code class=text-nowrap translate=no>visible</code></td> <td>The visibility state of the modal. <code class=text-nowrap translate=no>true</code> if the modal is visible and <code class=text-nowrap translate=no>false</code> if not visible</td> </tr> </tbody></table> </div><h4 id=example-modal-using-custom-scoped-slots class=bv-no-focus-ring><span class=bd-content-title>Example modal using custom scoped slots<a class=anchorjs-link href=#example-modal-using-custom-scoped-slots aria-labelledby=example-modal-using-custom-scoped-slots></a></span></h4> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"$bvModal.show(\'modal-scoped\')"</span>&gt;</span>Open Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-scoped"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:modal-header</span>=<span class=hljs-string>"{ close }"</span>&gt;</span>\n      <span class=hljs-comment>&lt;!-- Emulate built in modal header close button action --&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"outline-danger"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"close()"</span>&gt;</span>\n        Close Modal\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>h5</span>&gt;</span>Modal Header<span class=hljs-tag>&lt;/<span class=hljs-name>h5</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:default</span>=<span class=hljs-string>"{ hide }"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>Modal Body with button<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"hide()"</span>&gt;</span>Hide Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-slot:modal-footer</span>=<span class=hljs-string>"{ ok, cancel, hide }"</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b</span>&gt;</span>Custom Footer<span class=hljs-tag>&lt;/<span class=hljs-name>b</span>&gt;</span>\n      <span class=hljs-comment>&lt;!-- Emulate built in modal footer ok and cancel button actions --&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"success"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"ok()"</span>&gt;</span>\n        OK\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"danger"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"cancel()"</span>&gt;</span>\n        Cancel\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n      <span class=hljs-comment>&lt;!-- Button with custom close trigger value --&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>"outline-secondary"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"hide(\'forget\')"</span>&gt;</span>\n        Forget it\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-scoped-slots.vue --&gt;</span></pre></div><h2 id=multiple-modal-support class=bv-no-focus-ring><span class=bd-content-title>Multiple modal support<a class=anchorjs-link href=#multiple-modal-support aria-labelledby=multiple-modal-support></a></span></h2> <p>Unlike native Bootstrap v4, BootstrapVue supports multiple modals opened at the same time.</p> <p>To disable stacking for a specific modal, just set the prop <code class=text-nowrap translate=no>no-stacking</code> on the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> component. This will hide the modal before another modal is shown.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-multi-1</span>&gt;</span>Open First Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-multi-1"</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"lg"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"First Modal"</span> <span class=hljs-attr>ok-only</span> <span class=hljs-attr>no-stacking</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-2"</span>&gt;</span>First Modal<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-multi-2</span>&gt;</span>Open Second Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-multi-2"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Second Modal"</span> <span class=hljs-attr>ok-only</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-2"</span>&gt;</span>Second Modal<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> <span class=hljs-attr>v-b-modal.modal-multi-3</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span>&gt;</span>Open Third Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"modal-multi-3"</span> <span class=hljs-attr>size</span>=<span class=hljs-string>"sm"</span> <span class=hljs-attr>title</span>=<span class=hljs-string>"Third Modal"</span> <span class=hljs-attr>ok-only</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"my-1"</span>&gt;</span>Third Modal<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-multiple.vue --&gt;</span></pre></div><p><strong>Notes:</strong></p> <ul> <li>Avoid nesting a <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> <em>inside</em> another <code class=text-nowrap translate=no>&lt;b-modal&gt;</code>, as it may get &quot;constrained&quot; to the boundaries of the parent modal dialog (specifically when static modals are used).</li> <li>The opaque backdrop will appear progressively darker for each modal that is opened. This is expected behaviour as each backdrop is opened over top the other modals and backdrops.</li> </ul> <h2 id=modal-message-boxes class=bv-no-focus-ring><span class=bd-content-title>Modal message boxes<a class=anchorjs-link href=#modal-message-boxes aria-labelledby=modal-message-boxes></a></span></h2> <p>BootstrapVue provides a few built in Message Box methods on the exposed <code class=text-nowrap translate=no>this.$bvModal</code> object. These methods provide a way to generate simple OK and Confirm style modal messages, from anywhere in your app without having to explicitly place a <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> component in your pages.</p> <div class=table-responsive-sm><table class="b-table table table-bordered table-striped bv-docs-table"> <thead class=thead-default> <tr> <th>Method</th> <th>Description</th> </tr> </thead> <tbody><tr> <td><code class=text-nowrap translate=no>this.$bvModal.msgBoxOk(message, options)</code></td> <td>Open a modal with <code class=text-nowrap translate=no>message</code> as the content and a single OK button</td> </tr> <tr> <td><code class=text-nowrap translate=no>this.$bvModal.msgBoxConfirm(message, options)</code></td> <td>Open a modal with <code class=text-nowrap translate=no>message</code> as the content and CANCEL and OK buttons</td> </tr> </tbody></table> </div><p>The <code class=text-nowrap translate=no>options</code> argument is an optional configuration object for adding titles and styling the Message Box modal. The object properties correspond to <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> props, except in <samp class=notranslate translate=no>camelCase</samp> format instead of <samp class=notranslate translate=no>kebab-case</samp>.</p> <p>Both methods return a <code class=text-nowrap translate=no>Promise</code> (requires a polyfill for IE 11 and older browser support) which resolve into a value when the modal hides. <code class=text-nowrap translate=no>.msgBoxOk()</code> always resolves to the value <code class=text-nowrap translate=no>true</code>, while <code class=text-nowrap translate=no>.msgBoxConfirm()</code> resolves to either <code class=text-nowrap translate=no>true</code> (OK button pressed), <code class=text-nowrap translate=no>false</code> (CANCEL button pressed), or <code class=text-nowrap translate=no>null</code> (if the modal was closed via backdrop click, <kbd class=notranslate translate=no>Esc</kbd> press, or some other means.</p> <p>If <code class=text-nowrap translate=no>message</code> is not provided, both methods will return immediately with the value <code class=text-nowrap translate=no>undefined</code>.</p> <p>You can use either the <code class=text-nowrap translate=no>.then(..).catch(...)</code> or async <code class=text-nowrap translate=no>await</code> code styles (async <code class=text-nowrap translate=no>await</code> requires modern browsers or a transpiler).</p> <h3 id=ok-message-box class=bv-no-focus-ring><span class=bd-content-title>OK message box<a class=anchorjs-link href=#ok-message-box aria-labelledby=ok-message-box></a></span></h3> <p>Example OK Message boxes</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>&gt;</span>\n     <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"showMsgBoxOne"</span>&gt;</span>Simple msgBoxOk<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n     Return value: {{ String(boxOne) }}\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-1"</span>&gt;</span>\n     <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"showMsgBoxTwo"</span>&gt;</span>msgBoxOk with options<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n     Return value: {{ String(boxTwo) }}\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>boxOne</span>: <span class=hljs-string>\'\'</span>,\n        <span class=hljs-attr>boxTwo</span>: <span class=hljs-string>\'\'</span>\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      showMsgBoxOne() {\n        <span class=hljs-keyword>this</span>.boxOne = <span class=hljs-string>\'\'</span>\n        <span class=hljs-keyword>this</span>.$bvModal.msgBoxOk(<span class=hljs-string>\'Action completed\'</span>)\n          .then(<span class=hljs-function><span class=hljs-params>value</span> =&gt;</span> {\n            <span class=hljs-keyword>this</span>.boxOne = value\n          })\n          .catch(<span class=hljs-function><span class=hljs-params>err</span> =&gt;</span> {\n            <span class=hljs-comment>// An error occurred</span>\n          })\n      },\n      showMsgBoxTwo() {\n        <span class=hljs-keyword>this</span>.boxTwo = <span class=hljs-string>\'\'</span>\n        <span class=hljs-keyword>this</span>.$bvModal.msgBoxOk(<span class=hljs-string>\'Data was submitted successfully\'</span>, {\n          <span class=hljs-attr>title</span>: <span class=hljs-string>\'Confirmation\'</span>,\n          <span class=hljs-attr>size</span>: <span class=hljs-string>\'sm\'</span>,\n          <span class=hljs-attr>buttonSize</span>: <span class=hljs-string>\'sm\'</span>,\n          <span class=hljs-attr>okVariant</span>: <span class=hljs-string>\'success\'</span>,\n          <span class=hljs-attr>headerClass</span>: <span class=hljs-string>\'p-2 border-bottom-0\'</span>,\n          <span class=hljs-attr>footerClass</span>: <span class=hljs-string>\'p-2 border-top-0\'</span>,\n          <span class=hljs-attr>centered</span>: <span class=hljs-literal>true</span>\n        })\n          .then(<span class=hljs-function><span class=hljs-params>value</span> =&gt;</span> {\n            <span class=hljs-keyword>this</span>.boxTwo = value\n          })\n          .catch(<span class=hljs-function><span class=hljs-params>err</span> =&gt;</span> {\n            <span class=hljs-comment>// An error occurred</span>\n          })\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-msg-box-ok.vue --&gt;</span></pre></div><h3 id=confirm-message-box class=bv-no-focus-ring><span class=bd-content-title>Confirm message box<a class=anchorjs-link href=#confirm-message-box aria-labelledby=confirm-message-box></a></span></h3> <p>Example Confirm Message boxes</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-2"</span>&gt;</span>\n     <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"showMsgBoxOne"</span>&gt;</span>Simple msgBoxConfirm<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n     Return value: {{ String(boxOne) }}\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>"mb-1"</span>&gt;</span>\n     <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"showMsgBoxTwo"</span>&gt;</span>msgBoxConfirm with options<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n     Return value: {{ String(boxTwo) }}\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data() {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>boxOne</span>: <span class=hljs-string>\'\'</span>,\n        <span class=hljs-attr>boxTwo</span>: <span class=hljs-string>\'\'</span>\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      showMsgBoxOne() {\n        <span class=hljs-keyword>this</span>.boxOne = <span class=hljs-string>\'\'</span>\n        <span class=hljs-keyword>this</span>.$bvModal.msgBoxConfirm(<span class=hljs-string>\'Are you sure?\'</span>)\n          .then(<span class=hljs-function><span class=hljs-params>value</span> =&gt;</span> {\n            <span class=hljs-keyword>this</span>.boxOne = value\n          })\n          .catch(<span class=hljs-function><span class=hljs-params>err</span> =&gt;</span> {\n            <span class=hljs-comment>// An error occurred</span>\n          })\n      },\n      showMsgBoxTwo() {\n        <span class=hljs-keyword>this</span>.boxTwo = <span class=hljs-string>\'\'</span>\n        <span class=hljs-keyword>this</span>.$bvModal.msgBoxConfirm(<span class=hljs-string>\'Please confirm that you want to delete everything.\'</span>, {\n          <span class=hljs-attr>title</span>: <span class=hljs-string>\'Please Confirm\'</span>,\n          <span class=hljs-attr>size</span>: <span class=hljs-string>\'sm\'</span>,\n          <span class=hljs-attr>buttonSize</span>: <span class=hljs-string>\'sm\'</span>,\n          <span class=hljs-attr>okVariant</span>: <span class=hljs-string>\'danger\'</span>,\n          <span class=hljs-attr>okTitle</span>: <span class=hljs-string>\'YES\'</span>,\n          <span class=hljs-attr>cancelTitle</span>: <span class=hljs-string>\'NO\'</span>,\n          <span class=hljs-attr>footerClass</span>: <span class=hljs-string>\'p-2\'</span>,\n          <span class=hljs-attr>hideHeaderClose</span>: <span class=hljs-literal>false</span>,\n          <span class=hljs-attr>centered</span>: <span class=hljs-literal>true</span>\n        })\n          .then(<span class=hljs-function><span class=hljs-params>value</span> =&gt;</span> {\n            <span class=hljs-keyword>this</span>.boxTwo = value\n          })\n          .catch(<span class=hljs-function><span class=hljs-params>err</span> =&gt;</span> {\n            <span class=hljs-comment>// An error occurred</span>\n          })\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- b-modal-msg-box-confirm.vue --&gt;</span></pre></div><h3 id=message-box-notes class=bv-no-focus-ring><span class=bd-content-title>Message box notes<a class=anchorjs-link href=#message-box-notes aria-labelledby=message-box-notes></a></span></h3> <ul> <li>The <code class=text-nowrap translate=no>this.$bvModal</code> injection is only available when using the full <code class=text-nowrap translate=no>BootstrapVue</code> plugin or the <code class=text-nowrap translate=no>ModalPlugin</code> plugin. It is not available if importing just the <code class=text-nowrap translate=no>b-modal</code> component. To just import the injection, use the <code class=text-nowrap translate=no>BVModalPlugin</code> plugin.</li> <li>A new <code class=text-nowrap translate=no>$bvModal</code> injection (mixin) is created for each Vue virtual machine (i.e. each instantiated component), and is not usable via direct access to the <code class=text-nowrap translate=no>Vue.prototype</code>, as it needs access to the instance&#39;s <code class=text-nowrap translate=no>this</code> and <code class=text-nowrap translate=no>$root</code> contexts.</li> <li>Message Boxes require <code class=text-nowrap translate=no>Promise</code> support in the browser. If targeting your app for older browsers, such as IE 11, please include a polyfill that provides <code class=text-nowrap translate=no>Promise</code> support. If <code class=text-nowrap translate=no>Promise</code> support is not detected, then the message box methods will immediately return <code class=text-nowrap translate=no>undefined</code>.</li> <li>Message Boxes are an extension of the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> component, and hence support the majority of <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> props (using <samp class=notranslate translate=no>camelCase</samp> format), with the exception of the following props: <code class=text-nowrap translate=no>lazy</code>, <code class=text-nowrap translate=no>static</code>, <code class=text-nowrap translate=no>busy</code>, <code class=text-nowrap translate=no>visible</code>, <code class=text-nowrap translate=no>noStacking</code>, <code class=text-nowrap translate=no>okOnly</code>, <code class=text-nowrap translate=no>okDisabled</code>, and <code class=text-nowrap translate=no>cancelDisabled</code>.</li> <li>When a <code class=text-nowrap translate=no>title</code> (or <code class=text-nowrap translate=no>titleHtml</code>) <em>is not</em> provided in the options, the header will not be shown.</li> <li>When a <code class=text-nowrap translate=no>title</code> (or <code class=text-nowrap translate=no>titleHtml</code>) <em>is</em> provided in the options, the header close button is not shown by default. You can enable the header close button by setting <code class=text-nowrap translate=no>hideHeaderClose: false</code> in the options.</li> <li>Message Boxes will throw an error (promise rejection) if they are closed/destroyed before they are hidden. Always include a <code class=text-nowrap translate=no>.catch(errHandler)</code> reject handler, event if using the async <code class=text-nowrap translate=no>await</code> style code.</li> <li>When using Vue Router (or similar), Message Boxes will close and reject if the route changes before the modal hides. If you wish for the message box to remain open when the route changes, use <code class=text-nowrap translate=no>this.$root.$bvModal</code> instead of <code class=text-nowrap translate=no>this.$bvModal</code>.</li> <li>Message boxes cannot be generated during Server Side Rendering (SSR).</li> <li>The Message Box <code class=text-nowrap translate=no>message</code> currently does not support HTML strings, however, you can pass an <em>array</em> of <code class=text-nowrap translate=no>VNodes</code> as the <code class=text-nowrap translate=no>message</code> for fine grained control of the markup. You can use Vue&#39;s <a href=https://vuejs.org/v2/guide/render-function.html#createElement-Arguments target=_blank rel=noopener><code class=text-nowrap translate=no>this.$createElement</code></a> method to generate VNodes. This can also be done for the modal title (by passing VNodes to the <code class=text-nowrap translate=no>title</code> option), OK button text (via the <code class=text-nowrap translate=no>okTitle</code> option), and the CANCEL button text (via the <code class=text-nowrap translate=no>cancelTitle</code> option).</li> </ul> <h3 id=message-box-advanced-usage class=bv-no-focus-ring><span class=bd-content-title>Message box advanced usage<a class=anchorjs-link href=#message-box-advanced-usage aria-labelledby=message-box-advanced-usage></a></span></h3> <p>When using the <code class=text-nowrap translate=no>this.$bvModal.msgBoxOk(...)</code> or <code class=text-nowrap translate=no>this.$bvModal.msgBoxConfirm(...)</code> methods for generating modals, you may want the modal content to be more than just a string message. As mentioned in the <a href=#message-box-notes class=font-weight-bold>message box notes</a> section above, you can pass <em>arrays</em> of VNodes as the message and title for more complex content.</p> <p>Use Vue&#39;s <a href=https://vuejs.org/v2/guide/render-function.html#createElement-Arguments target=_blank rel=noopener><code class=text-nowrap translate=no>this.$createElement</code></a> method to generate VNodes.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"showMsgOk"</span>&gt;</span>Show OK message box with custom content<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    <span class=hljs-attr>methods</span>: {\n      showMsgOk() {\n        <span class=hljs-keyword>const</span> h = <span class=hljs-keyword>this</span>.$createElement\n        <span class=hljs-comment>// Using HTML string</span>\n        <span class=hljs-keyword>const</span> titleVNode = h(<span class=hljs-string>\'div\'</span>, { <span class=hljs-attr>domProps</span>: { <span class=hljs-attr>innerHTML</span>: <span class=hljs-string>\'Title from &lt;i&gt;HTML&lt;i&gt; string\'</span> } })\n        <span class=hljs-comment>// More complex structure</span>\n        <span class=hljs-keyword>const</span> messageVNode = h(<span class=hljs-string>\'div\'</span>, { <span class=hljs-attr>class</span>: [<span class=hljs-string>\'foobar\'</span>] }, [\n          h(<span class=hljs-string>\'p\'</span>, { <span class=hljs-attr>class</span>: [<span class=hljs-string>\'text-center\'</span>] }, [\n            <span class=hljs-string>\' Flashy \'</span>,\n            h(<span class=hljs-string>\'strong\'</span>, <span class=hljs-string>\'msgBoxOk\'</span>),\n            <span class=hljs-string>\' message \'</span>,\n          ]),\n          h(<span class=hljs-string>\'p\'</span>, { <span class=hljs-attr>class</span>: [<span class=hljs-string>\'text-center\'</span>] }, [h(<span class=hljs-string>\'b-spinner\'</span>)]),\n          h(<span class=hljs-string>\'b-img\'</span>, {\n            <span class=hljs-attr>props</span>: {\n              <span class=hljs-attr>src</span>: <span class=hljs-string>\'https://picsum.photos/id/20/250/250\'</span>,\n              <span class=hljs-attr>thumbnail</span>: <span class=hljs-literal>true</span>,\n              <span class=hljs-attr>center</span>: <span class=hljs-literal>true</span>,\n              <span class=hljs-attr>fluid</span>: <span class=hljs-literal>true</span>, <span class=hljs-attr>rounded</span>: <span class=hljs-string>\'circle\'</span>\n            }\n          })\n        ])\n        <span class=hljs-comment>// We must pass the generated VNodes as arrays</span>\n        <span class=hljs-keyword>this</span>.$bvModal.msgBoxOk([messageVNode], {\n          <span class=hljs-attr>title</span>: [titleVNode],\n          <span class=hljs-attr>buttonSize</span>: <span class=hljs-string>\'sm\'</span>,\n          <span class=hljs-attr>centered</span>: <span class=hljs-literal>true</span>, <span class=hljs-attr>size</span>: <span class=hljs-string>\'sm\'</span>\n        })\n      }\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- modal-msg-box-advanced.vue --&gt;</span></pre></div><h2 id=listening-to-modal-changes-via-root-events class=bv-no-focus-ring><span class=bd-content-title>Listening to modal changes via $root events<a class=anchorjs-link href=#listening-to-modal-changes-via-root-events aria-labelledby=listening-to-modal-changes-via-root-events></a></span></h2> <p>To listen to any modal opening, use:</p> <div class=bd-code><pre class="hljs js p-2" translate=no><span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  mounted() {\n    <span class=hljs-keyword>this</span>.$root.$on(<span class=hljs-string>\'bv::modal::show\'</span>, (bvEvent, modalId) =&gt; {\n      <span class=hljs-built_in>console</span>.log(<span class=hljs-string>\'Modal is about to be shown\'</span>, bvEvent, modalId)\n    })\n  }\n}</pre></div><p>Refer to the <a href=#comp-ref-b-modal class=font-weight-bold>Events</a> section of this documentation for the full list of events emitted.</p> <h2 id=accessibility class=bv-no-focus-ring><span class=bd-content-title>Accessibility<a class=anchorjs-link href=#accessibility aria-labelledby=accessibility></a></span></h2> <p><code class=text-nowrap translate=no>&lt;b-modal&gt;</code> provides several accessibility features, including auto focus, return focus, keyboard (tab) <em>focus containment</em>, and automated <code class=text-nowrap translate=no>aria-*</code> attributes.</p> <p><strong>Note:</strong> The animation effect of this component is dependent on the <code class=text-nowrap translate=no>prefers-reduced-motion</code> media query. See the <a href=/docs/reference/accessibility class=font-weight-bold>reduced motion section of our accessibility documentation</a> for additional details.</p> <h3 id=modal-aria-attributes class=bv-no-focus-ring><span class=bd-content-title>Modal ARIA attributes<a class=anchorjs-link href=#modal-aria-attributes aria-labelledby=modal-aria-attributes></a></span></h3> <p>The <code class=text-nowrap translate=no>aria-labelledby</code> and <code class=text-nowrap translate=no>aria-describedby</code> attributes will appear on the modal automatically in most cases.</p> <ul> <li>The <code class=text-nowrap translate=no>aria-labelledby</code> attribute will <strong>not</strong> be present if you have the header hidden, or supplied your own header, or have not supplied a modal title. It is recommended to supply a title for your modals (when using the built in header). You can visually hide the header title, but still make it available to screen readers by setting the <code class=text-nowrap translate=no>title-sr-only</code> prop. If you do not have a header, you can supply a label for the modal by passing a string to the <code class=text-nowrap translate=no>aria-label</code> prop.</li> <li>The <code class=text-nowrap translate=no>aria-describedby</code> attribute will always point to the modal&#39;s body content.</li> <li>If the <code class=text-nowrap translate=no>aria-label</code> prop is specified with a string value, the <code class=text-nowrap translate=no>aria-labelledby</code> attribute will not be rendered, even if you have a title/header for your modal.</li> </ul> <p>The <code class=text-nowrap translate=no>aria-label</code> and <code class=text-nowrap translate=no>title-sr-only</code> props were added in version <code class=text-nowrap translate=no>v2.0.0-rc.27</code>.</p> <h3 id=auto-focus-on-open class=bv-no-focus-ring><span class=bd-content-title>Auto focus on open<a class=anchorjs-link href=#auto-focus-on-open aria-labelledby=auto-focus-on-open></a></span></h3> <p><code class=text-nowrap translate=no>&lt;b-modal&gt;</code> will autofocus the modal <em>container</em> when opened.</p> <p>You can pre-focus an element within the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> by listening to the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> <code class=text-nowrap translate=no>shown</code> event, and call the element&#39;s <code class=text-nowrap translate=no>focus()</code> method. <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> will not attempt to autofocus if an element already has focus within the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code>.</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span> @<span class=hljs-attr>shown</span>=<span class=hljs-string>"focusMyElement"</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span>&gt;</span>I Don\'t Have Focus<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-input</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-input</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-comment>&lt;!-- Element to gain focus when modal is opened --&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-input</span> <span class=hljs-attr>ref</span>=<span class=hljs-string>"focusThis"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-input</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-form-input</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-form-input</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span></pre></div><div class=bd-code><pre class="hljs js p-2" translate=no><span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  <span class=hljs-attr>methods</span>: {\n    focusMyElement() {\n      <span class=hljs-keyword>this</span>.$refs.focusThis.focus()\n    }\n  }\n}</pre></div><p>Alternatively, if using <code class=text-nowrap translate=no>b-form-*</code> form controls, you can use the <code class=text-nowrap translate=no>autofocus</code> prop to automatically focus a form control when the modal opens. Note that the <code class=text-nowrap translate=no>autofocus</code> prop will not work with <code class=text-nowrap translate=no>b-modal</code> if the <code class=text-nowrap translate=no>static</code> prop is used without the <code class=text-nowrap translate=no>lazy</code> prop set, as <code class=text-nowrap translate=no>autofocus</code> happens when the <code class=text-nowrap translate=no>b-form-*</code> controls are <em>mounted in the DOM</em>.</p> <p>If you want to auto focus one of the <em>built-in</em> modal buttons (<code class=text-nowrap translate=no>ok</code>, <code class=text-nowrap translate=no>cancel</code> or the header <code class=text-nowrap translate=no>close</code> button, you can set the prop <code class=text-nowrap translate=no>auto-focus-button</code> to one of the values <code class=text-nowrap translate=no>&#39;ok&#39;</code>, <code class=text-nowrap translate=no>&#39;cancel&#39;</code> or <code class=text-nowrap translate=no>&#39;close&#39;</code> and <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> will focus the specified button if it exists. This feature is also available for modal message boxes.</p> <p class="alert alert-warning"> <strong>Note:</strong> it is <strong>not recommended</strong> to autofocus an input or control inside of a modal for accessibility reasons, as screen reader users will not know the context of where the input is (the announcement of the modal may not be spoken). It is best to let <code class=notranslate translate=no>&lt;b-modal&gt;</code> focus the modal\'s container, allowing the modal information to be spoken to the user, and then allow the user to tab into the input. </p> <h3 id=returning-focus-to-the-triggering-element class=bv-no-focus-ring><span class=bd-content-title>Returning focus to the triggering element<a class=anchorjs-link href=#returning-focus-to-the-triggering-element aria-labelledby=returning-focus-to-the-triggering-element></a></span></h3> <p>For accessibility reasons, it is desirable to return focus to the element that triggered the opening of the modal, when the modal closes.</p> <p><code class=text-nowrap translate=no>&lt;b-modal&gt;</code> will try and automatically determine which element had focus before the modal was opened, and will return the focus to that element when the modal has hidden if possible. However, several methods and options are provided to allow you to specify the element to return focus to once the modal has hidden.</p> <h4 id=specify-return-focus-element-via-the-return-focus-prop class=bv-no-focus-ring><span class=bd-content-title>Specify return focus element via the <code class=text-nowrap translate=no>return-focus</code> prop<a class=anchorjs-link href=#specify-return-focus-element-via-the-return-focus-prop aria-labelledby=specify-return-focus-element-via-the-return-focus-prop></a></span></h4> <p>You can also specify an element to return focus to, when modal closes, by setting the <code class=text-nowrap translate=no>return-focus</code> prop to one of the following:</p> <ul> <li>A CSS Query Selector string (or an element ID prepended with <code class=text-nowrap translate=no>#</code>)</li> <li>A component reference (which is mounted on a focusable element, such as <code class=text-nowrap translate=no>&lt;b-button&gt;</code>)</li> <li>A reference to a DOM element that is focusable</li> </ul> <p>If the passed in element is not focusable, then the browser will determine what has focus (usually <code class=text-nowrap translate=no>&lt;body&gt;</code>, which is not desirable)</p> <p>This method for returning focus is handy when you use the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> methods <code class=text-nowrap translate=no>show()</code> and <code class=text-nowrap translate=no>hide()</code>, or the <code class=text-nowrap translate=no>v-model</code> prop. Note this property takes precedence over other methods of specifying the return focus element.</p> <h4 id=auto-return-focus class=bv-no-focus-ring><span class=bd-content-title>Auto return focus<a class=anchorjs-link href=#auto-return-focus aria-labelledby=auto-return-focus></a></span></h4> <p>When <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> is opened via the <code class=text-nowrap translate=no>v-b-modal</code> directive on an element, focus will be returned to this element automatically when <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> closes, unless an element has been specified via the <code class=text-nowrap translate=no>return-focus</code> prop.</p> <h4 id=specify-return-focus-via-event class=bv-no-focus-ring><span class=bd-content-title>Specify return focus via event<a class=anchorjs-link href=#specify-return-focus-via-event aria-labelledby=specify-return-focus-via-event></a></span></h4> <p>When using the <code class=text-nowrap translate=no>bv::show::modal</code> event (emitted on <code class=text-nowrap translate=no>$root</code>), you can specify a second argument which is the element to return focus to. This argument accepts the same types as the <code class=text-nowrap translate=no>return-focus</code> prop.</p> <div class=bd-code><pre class="hljs js p-2" translate=no><span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>\'bv::show::modal\'</span>, <span class=hljs-string>\'modal-1\'</span>, <span class=hljs-string>\'#focusThisOnClose\'</span>)</pre></div><p><em>Tip:</em> if using a click event (or similar) to trigger modal to open, pass the event&#39;s <code class=text-nowrap translate=no>target</code> property:</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-button</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>"$root.$emit(\'bv::show::modal\', \'modal-1\', $event.target)"</span>&gt;</span>Open Modal<span class=hljs-tag>&lt;/<span class=hljs-name>b-button</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span></pre></div><p><strong>Note:</strong> If the <code class=text-nowrap translate=no>&lt;b-modal&gt;</code> has the <code class=text-nowrap translate=no>return-focus</code> prop set, then the element specified via the event will be ignored.</p> <h3 id=keyboard-navigation class=bv-no-focus-ring><span class=bd-content-title>Keyboard navigation<a class=anchorjs-link href=#keyboard-navigation aria-labelledby=keyboard-navigation></a></span></h3> <p>When tabbing through elements within a <code class=text-nowrap translate=no>&lt;b-modal&gt;</code>, if focus attempts to leave the modal into the document, it will be brought back into the modal.</p> <p>Avoid setting <code class=text-nowrap translate=no>tabindex</code> on elements within the modal to any value other than <code class=text-nowrap translate=no>0</code> or <code class=text-nowrap translate=no>-1</code>. Doing so will make it difficult for people who rely on assistive technology to navigate and operate page content and can make some of your elements unreachable via keyboard navigation.</p> <p>If some elements outside the modal need to be focusable (i.e. for TinyMCE), you can add them as CSS selectors to the <code class=text-nowrap translate=no>ignore-enforce-focus-selector</code> prop <span class="badge badge-secondary">2.4.0+</span>, e.g.:</p> <div class=bd-code><pre class="hljs html p-2" translate=no><span class=hljs-tag>&lt;<span class=hljs-name>b-modal</span>\n  <span class=hljs-attr>id</span>=<span class=hljs-string>"some-modal-id"</span>\n  <span class=hljs-attr>title</span>=<span class=hljs-string>"Modal with TinyMCE Editor"</span>\n  <span class=hljs-attr>ignore-enforce-focus-selector</span>=<span class=hljs-string>".tox-tinymce-aux, .moxman-window, .tam-assetmanager-root"</span>\n&gt;</span>\n  <span class=hljs-comment>&lt;!-- Modal content with TinyMCE editor here --&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>b-modal</span>&gt;</span></pre></div><p>In some circumstances, you may need to disable the enforce focus feature completely. You can do this by setting the prop <code class=text-nowrap translate=no>no-enforce-focus</code>, although this is <em>highly discouraged</em> for accessibility reasons.</p> <h3 id=v-b-modal-directive-accessibility class=bv-no-focus-ring><span class=bd-content-title><code class=text-nowrap translate=no>v-b-modal</code> directive accessibility<a class=anchorjs-link href=#v-b-modal-directive-accessibility aria-labelledby=v-b-modal-directive-accessibility></a></span></h3> <p>Notes on <code class=text-nowrap translate=no>v-b-modal</code> directive accessibility:</p> <ul> <li>If the element is anything other than a <code class=text-nowrap translate=no>&lt;button&gt;</code> (or component that renders a <code class=text-nowrap translate=no>&lt;button&gt;</code>), the ARIA <code class=text-nowrap translate=no>role</code> will be set to <code class=text-nowrap translate=no>button</code>, and a keydown event listeners for <kbd class=notranslate translate=no>Enter</kbd> and <kbd class=notranslate translate=no>Space</kbd> will be added, along with a <code class=text-nowrap translate=no>click</code> listener.</li> <li>If the element is anything other than a <code class=text-nowrap translate=no>&lt;button&gt;</code> or <code class=text-nowrap translate=no>&lt;a&gt;</code> (or a component that renders either), then a <code class=text-nowrap translate=no>tabindex</code> of <code class=text-nowrap translate=no>0</code> will be added to the element to ensure accessibility, unless there is already a <code class=text-nowrap translate=no>tabindex</code> set.</li> </ul> '}}]);